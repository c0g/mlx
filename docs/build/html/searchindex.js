Search.setIndex({"alltitles": {"A Simple Example": [[464, "a-simple-example"]], "Array": [[302, null]], "Attention layer": [[5, "attention-layer"]], "Automatic Differentiation": [[458, "automatic-differentiation"]], "Automatic Vectorization": [[458, "automatic-vectorization"]], "Basics": [[462, "basics"]], "Basics of Compile": [[456, "basics-of-compile"]], "Binary Size Minimization": [[8, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[8, "id3"]], "Build Requirements": [[8, "build-requirements"]], "Build and Install": [[8, null]], "Build from source": [[8, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[8, "c-api"]], "C++ API Reference": [[7, null]], "Common Optimizers": [[450, null]], "Compilation": [[456, null]], "Compiling Training Graphs": [[456, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[461, null]], "Converting the weights": [[5, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[303, null]], "Debugging": [[456, "debugging"]], "Devices and Streams": [[304, null]], "Differences from NumPy": [[459, "differences-from-numpy"]], "Distributed Communication": [[305, null], [457, null]], "Download the code": [[2, null], [5, null]], "Encoder layer": [[5, "encoder-layer"]], "Example Speedup": [[456, "example-speedup"]], "Examples": [[7, null]], "FFT": [[307, null]], "Fast": [[306, null]], "Full model": [[5, "full-model"]], "Function Transforms": [[458, null]], "Function and Graph Transformations": [[462, "function-and-graph-transformations"]], "Functions": [[425, null]], "Further Reading": [[7, null]], "Generation": [[5, "generation"]], "Getting Started": [[457, "getting-started"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[5, "implementing-the-model"]], "In Place Updates": [[459, "in-place-updates"]], "Indexing Arrays": [[459, null]], "Initializers": [[426, null]], "Inspecting Modules": [[310, "inspecting-modules"]], "Install": [[7, null]], "Installing MPI": [[457, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[461, "jax"]], "LLM inference": [[5, null]], "Layers": [[427, null]], "Lazy Evaluation": [[460, null]], "Linear Algebra": [[308, null]], "Linear Regression": [[4, null]], "Loss Functions": [[428, null]], "MLX": [[7, null]], "Metal": [[309, null]], "Metal Debugger": [[3, null]], "Metal not found": [[8, "metal-not-found"]], "Module": [[429, null]], "Multi-Layer Perceptron": [[6, null]], "Neural Networks": [[310, null]], "Only Compute What You Use": [[460, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [430, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[451, null]], "Optimizers": [[431, null]], "Parameters": [[310, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Pure Functions": [[456, "pure-functions"]], "Putting it all together": [[5, "putting-it-all-together"]], "PyTorch": [[461, "pytorch"]], "Python API": [[8, "python-api"]], "Python API Reference": [[7, null]], "Python Installation": [[8, "python-installation"]], "Quick Start Guide": [[462, null]], "Quick Start with Neural Networks": [[310, "quick-start-with-neural-networks"]], "Random": [[453, null]], "Results": [[2, "results"]], "Saving and Loading": [[431, "saving-and-loading"]], "Saving and Loading Arrays": [[463, null]], "Schedulers": [[452, null]], "Scripts": [[2, "scripts"], [5, "scripts"]], "Serialization Formats": [[463, "id1"]], "Setting up Remote Hosts": [[457, "setting-up-remote-hosts"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[465, "specifying-the-stream"]], "Supported Data Types": [[303, "id2"]], "TensorFlow": [[461, "tensorflow"]], "The Module Class": [[310, "the-module-class"]], "Training Example": [[457, "training-example"]], "Transformations with Compile": [[456, "transformations-with-compile"]], "Transforming Compute Graphs": [[460, "transforming-compute-graphs"]], "Transforms": [[454, null]], "Tree Utils": [[455, null]], "Troubleshooting": [[8, "troubleshooting"], [8, "id2"]], "Tuning All Reduce": [[457, "tuning-all-reduce"]], "Unified Memory": [[464, null]], "Updating the Parameters": [[310, "updating-the-parameters"]], "Usage": [[2, "usage"], [7, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[465, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Value and Grad": [[310, "value-and-grad"]], "Weight loading and benchmarking": [[5, "weight-loading-and-benchmarking"]], "When to Evaluate": [[460, "when-to-evaluate"]], "Why Lazy Evaluation": [[460, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[9, null]], "mlx.core.Dtype": [[10, null]], "mlx.core.DtypeCategory": [[11, null]], "mlx.core.Stream": [[301, null]], "mlx.core.abs": [[12, null]], "mlx.core.add": [[13, null]], "mlx.core.addmm": [[14, null]], "mlx.core.all": [[15, null]], "mlx.core.allclose": [[16, null]], "mlx.core.any": [[17, null]], "mlx.core.arange": [[18, null]], "mlx.core.arccos": [[19, null]], "mlx.core.arccosh": [[20, null]], "mlx.core.arcsin": [[21, null]], "mlx.core.arcsinh": [[22, null]], "mlx.core.arctan": [[23, null]], "mlx.core.arctan2": [[24, null]], "mlx.core.arctanh": [[25, null]], "mlx.core.argmax": [[26, null]], "mlx.core.argmin": [[27, null]], "mlx.core.argpartition": [[28, null]], "mlx.core.argsort": [[29, null]], "mlx.core.array": [[30, null]], "mlx.core.array.T": [[31, null]], "mlx.core.array.abs": [[32, null]], "mlx.core.array.all": [[33, null]], "mlx.core.array.any": [[34, null]], "mlx.core.array.argmax": [[35, null]], "mlx.core.array.argmin": [[36, null]], "mlx.core.array.astype": [[37, null]], "mlx.core.array.at": [[38, null]], "mlx.core.array.conj": [[39, null]], "mlx.core.array.cos": [[40, null]], "mlx.core.array.cummax": [[41, null]], "mlx.core.array.cummin": [[42, null]], "mlx.core.array.cumprod": [[43, null]], "mlx.core.array.cumsum": [[44, null]], "mlx.core.array.diag": [[45, null]], "mlx.core.array.diagonal": [[46, null]], "mlx.core.array.dtype": [[47, null]], "mlx.core.array.exp": [[48, null]], "mlx.core.array.flatten": [[49, null]], "mlx.core.array.item": [[50, null]], "mlx.core.array.itemsize": [[51, null]], "mlx.core.array.log": [[52, null]], "mlx.core.array.log10": [[53, null]], "mlx.core.array.log1p": [[54, null]], "mlx.core.array.log2": [[55, null]], "mlx.core.array.logsumexp": [[56, null]], "mlx.core.array.max": [[57, null]], "mlx.core.array.mean": [[58, null]], "mlx.core.array.min": [[59, null]], "mlx.core.array.moveaxis": [[60, null]], "mlx.core.array.nbytes": [[61, null]], "mlx.core.array.ndim": [[62, null]], "mlx.core.array.prod": [[63, null]], "mlx.core.array.reciprocal": [[64, null]], "mlx.core.array.reshape": [[65, null]], "mlx.core.array.round": [[66, null]], "mlx.core.array.rsqrt": [[67, null]], "mlx.core.array.shape": [[68, null]], "mlx.core.array.sin": [[69, null]], "mlx.core.array.size": [[70, null]], "mlx.core.array.split": [[71, null]], "mlx.core.array.sqrt": [[72, null]], "mlx.core.array.square": [[73, null]], "mlx.core.array.squeeze": [[74, null]], "mlx.core.array.sum": [[75, null]], "mlx.core.array.swapaxes": [[76, null]], "mlx.core.array.tolist": [[77, null]], "mlx.core.array.transpose": [[78, null]], "mlx.core.array.var": [[79, null]], "mlx.core.array.view": [[80, null]], "mlx.core.array_equal": [[81, null]], "mlx.core.as_strided": [[82, null]], "mlx.core.atleast_1d": [[83, null]], "mlx.core.atleast_2d": [[84, null]], "mlx.core.atleast_3d": [[85, null]], "mlx.core.bitwise_and": [[86, null]], "mlx.core.bitwise_or": [[87, null]], "mlx.core.bitwise_xor": [[88, null]], "mlx.core.block_masked_mm": [[89, null]], "mlx.core.broadcast_to": [[90, null]], "mlx.core.ceil": [[91, null]], "mlx.core.clip": [[92, null]], "mlx.core.compile": [[93, null]], "mlx.core.concatenate": [[94, null]], "mlx.core.conj": [[95, null]], "mlx.core.conjugate": [[96, null]], "mlx.core.conv1d": [[97, null]], "mlx.core.conv2d": [[98, null]], "mlx.core.conv3d": [[99, null]], "mlx.core.conv_general": [[100, null]], "mlx.core.convolve": [[101, null]], "mlx.core.cos": [[102, null]], "mlx.core.cosh": [[103, null]], "mlx.core.cummax": [[104, null]], "mlx.core.cummin": [[105, null]], "mlx.core.cumprod": [[106, null]], "mlx.core.cumsum": [[107, null]], "mlx.core.custom_function": [[108, null]], "mlx.core.default_device": [[109, null]], "mlx.core.default_stream": [[110, null]], "mlx.core.degrees": [[111, null]], "mlx.core.dequantize": [[112, null]], "mlx.core.diag": [[113, null]], "mlx.core.diagonal": [[114, null]], "mlx.core.disable_compile": [[115, null]], "mlx.core.distributed.Group": [[116, null]], "mlx.core.distributed.all_gather": [[117, null]], "mlx.core.distributed.all_sum": [[118, null]], "mlx.core.distributed.init": [[119, null]], "mlx.core.distributed.is_available": [[120, null]], "mlx.core.distributed.recv": [[121, null]], "mlx.core.distributed.recv_like": [[122, null]], "mlx.core.distributed.send": [[123, null]], "mlx.core.divide": [[124, null]], "mlx.core.divmod": [[125, null]], "mlx.core.einsum": [[126, null]], "mlx.core.einsum_path": [[127, null]], "mlx.core.enable_compile": [[128, null]], "mlx.core.equal": [[129, null]], "mlx.core.erf": [[130, null]], "mlx.core.erfinv": [[131, null]], "mlx.core.eval": [[132, null]], "mlx.core.exp": [[133, null]], "mlx.core.expand_dims": [[134, null]], "mlx.core.expm1": [[135, null]], "mlx.core.eye": [[136, null]], "mlx.core.fast.affine_quantize": [[137, null]], "mlx.core.fast.layer_norm": [[138, null]], "mlx.core.fast.metal_kernel": [[139, null]], "mlx.core.fast.rms_norm": [[140, null]], "mlx.core.fast.rope": [[141, null]], "mlx.core.fast.scaled_dot_product_attention": [[142, null]], "mlx.core.fft.fft": [[143, null]], "mlx.core.fft.fft2": [[144, null]], "mlx.core.fft.fftn": [[145, null]], "mlx.core.fft.ifft": [[146, null]], "mlx.core.fft.ifft2": [[147, null]], "mlx.core.fft.ifftn": [[148, null]], "mlx.core.fft.irfft": [[149, null]], "mlx.core.fft.irfft2": [[150, null]], "mlx.core.fft.irfftn": [[151, null]], "mlx.core.fft.rfft": [[152, null]], "mlx.core.fft.rfft2": [[153, null]], "mlx.core.fft.rfftn": [[154, null]], "mlx.core.flatten": [[155, null]], "mlx.core.floor": [[156, null]], "mlx.core.floor_divide": [[157, null]], "mlx.core.full": [[158, null]], "mlx.core.gather_mm": [[159, null]], "mlx.core.gather_qmm": [[160, null]], "mlx.core.grad": [[161, null]], "mlx.core.greater": [[162, null]], "mlx.core.greater_equal": [[163, null]], "mlx.core.hadamard_transform": [[164, null]], "mlx.core.identity": [[165, null]], "mlx.core.inner": [[166, null]], "mlx.core.isclose": [[167, null]], "mlx.core.isinf": [[168, null]], "mlx.core.isnan": [[169, null]], "mlx.core.isneginf": [[170, null]], "mlx.core.isposinf": [[171, null]], "mlx.core.issubdtype": [[172, null]], "mlx.core.jvp": [[173, null]], "mlx.core.left_shift": [[174, null]], "mlx.core.less": [[175, null]], "mlx.core.less_equal": [[176, null]], "mlx.core.linalg.cholesky": [[177, null]], "mlx.core.linalg.cholesky_inv": [[178, null]], "mlx.core.linalg.inv": [[179, null]], "mlx.core.linalg.norm": [[180, null]], "mlx.core.linalg.qr": [[181, null]], "mlx.core.linalg.svd": [[182, null]], "mlx.core.linalg.tri_inv": [[183, null]], "mlx.core.linspace": [[184, null]], "mlx.core.load": [[185, null]], "mlx.core.log": [[186, null]], "mlx.core.log10": [[187, null]], "mlx.core.log1p": [[188, null]], "mlx.core.log2": [[189, null]], "mlx.core.logaddexp": [[190, null]], "mlx.core.logical_and": [[191, null]], "mlx.core.logical_not": [[192, null]], "mlx.core.logical_or": [[193, null]], "mlx.core.logsumexp": [[194, null]], "mlx.core.matmul": [[195, null]], "mlx.core.max": [[196, null]], "mlx.core.maximum": [[197, null]], "mlx.core.mean": [[198, null]], "mlx.core.meshgrid": [[199, null]], "mlx.core.metal.clear_cache": [[200, null]], "mlx.core.metal.device_info": [[201, null]], "mlx.core.metal.get_active_memory": [[202, null]], "mlx.core.metal.get_cache_memory": [[203, null]], "mlx.core.metal.get_peak_memory": [[204, null]], "mlx.core.metal.is_available": [[205, null]], "mlx.core.metal.reset_peak_memory": [[206, null]], "mlx.core.metal.set_cache_limit": [[207, null]], "mlx.core.metal.set_memory_limit": [[208, null]], "mlx.core.metal.start_capture": [[209, null]], "mlx.core.metal.stop_capture": [[210, null]], "mlx.core.min": [[211, null]], "mlx.core.minimum": [[212, null]], "mlx.core.moveaxis": [[213, null]], "mlx.core.multiply": [[214, null]], "mlx.core.nan_to_num": [[215, null]], "mlx.core.negative": [[216, null]], "mlx.core.new_stream": [[217, null]], "mlx.core.not_equal": [[218, null]], "mlx.core.ones": [[219, null]], "mlx.core.ones_like": [[220, null]], "mlx.core.outer": [[221, null]], "mlx.core.pad": [[222, null]], "mlx.core.partition": [[223, null]], "mlx.core.power": [[224, null]], "mlx.core.prod": [[225, null]], "mlx.core.quantize": [[226, null]], "mlx.core.quantized_matmul": [[227, null]], "mlx.core.radians": [[228, null]], "mlx.core.random.bernoulli": [[229, null]], "mlx.core.random.categorical": [[230, null]], "mlx.core.random.gumbel": [[231, null]], "mlx.core.random.key": [[232, null]], "mlx.core.random.laplace": [[233, null]], "mlx.core.random.multivariate_normal": [[234, null]], "mlx.core.random.normal": [[235, null]], "mlx.core.random.randint": [[236, null]], "mlx.core.random.seed": [[237, null]], "mlx.core.random.split": [[238, null]], "mlx.core.random.truncated_normal": [[239, null]], "mlx.core.random.uniform": [[240, null]], "mlx.core.reciprocal": [[241, null]], "mlx.core.remainder": [[242, null]], "mlx.core.repeat": [[243, null]], "mlx.core.reshape": [[244, null]], "mlx.core.right_shift": [[245, null]], "mlx.core.round": [[246, null]], "mlx.core.rsqrt": [[247, null]], "mlx.core.save": [[248, null]], "mlx.core.save_gguf": [[249, null]], "mlx.core.save_safetensors": [[250, null]], "mlx.core.savez": [[251, null]], "mlx.core.savez_compressed": [[252, null]], "mlx.core.set_default_device": [[253, null]], "mlx.core.set_default_stream": [[254, null]], "mlx.core.sigmoid": [[255, null]], "mlx.core.sign": [[256, null]], "mlx.core.sin": [[257, null]], "mlx.core.sinh": [[258, null]], "mlx.core.softmax": [[259, null]], "mlx.core.sort": [[260, null]], "mlx.core.split": [[261, null]], "mlx.core.sqrt": [[262, null]], "mlx.core.square": [[263, null]], "mlx.core.squeeze": [[264, null]], "mlx.core.stack": [[265, null]], "mlx.core.std": [[266, null]], "mlx.core.stop_gradient": [[267, null]], "mlx.core.stream": [[268, null]], "mlx.core.subtract": [[269, null]], "mlx.core.sum": [[270, null]], "mlx.core.swapaxes": [[271, null]], "mlx.core.synchronize": [[272, null]], "mlx.core.take": [[273, null]], "mlx.core.take_along_axis": [[274, null]], "mlx.core.tan": [[275, null]], "mlx.core.tanh": [[276, null]], "mlx.core.tensordot": [[277, null]], "mlx.core.tile": [[278, null]], "mlx.core.topk": [[279, null]], "mlx.core.trace": [[280, null]], "mlx.core.transpose": [[281, null]], "mlx.core.tri": [[282, null]], "mlx.core.tril": [[283, null]], "mlx.core.triu": [[284, null]], "mlx.core.value_and_grad": [[285, null]], "mlx.core.var": [[286, null]], "mlx.core.view": [[287, null]], "mlx.core.vjp": [[288, null]], "mlx.core.vmap": [[289, null]], "mlx.core.where": [[290, null]], "mlx.core.zeros": [[291, null]], "mlx.core.zeros_like": [[292, null]], "mlx.nn.ALiBi": [[311, null]], "mlx.nn.AvgPool1d": [[312, null]], "mlx.nn.AvgPool2d": [[313, null]], "mlx.nn.BatchNorm": [[314, null]], "mlx.nn.Conv1d": [[315, null]], "mlx.nn.Conv2d": [[316, null]], "mlx.nn.Conv3d": [[317, null]], "mlx.nn.Dropout": [[318, null]], "mlx.nn.Dropout2d": [[319, null]], "mlx.nn.Dropout3d": [[320, null]], "mlx.nn.Embedding": [[321, null]], "mlx.nn.GELU": [[322, null]], "mlx.nn.GLU": [[323, null]], "mlx.nn.GRU": [[324, null]], "mlx.nn.GroupNorm": [[325, null]], "mlx.nn.HardShrink": [[326, null]], "mlx.nn.HardTanh": [[327, null]], "mlx.nn.Hardswish": [[328, null]], "mlx.nn.InstanceNorm": [[329, null]], "mlx.nn.LSTM": [[330, null]], "mlx.nn.LayerNorm": [[331, null]], "mlx.nn.LeakyReLU": [[332, null]], "mlx.nn.Linear": [[333, null]], "mlx.nn.MaxPool1d": [[334, null]], "mlx.nn.MaxPool2d": [[335, null]], "mlx.nn.Mish": [[336, null]], "mlx.nn.Module.apply": [[337, null]], "mlx.nn.Module.apply_to_modules": [[338, null]], "mlx.nn.Module.children": [[339, null]], "mlx.nn.Module.eval": [[340, null]], "mlx.nn.Module.filter_and_map": [[341, null]], "mlx.nn.Module.freeze": [[342, null]], "mlx.nn.Module.leaf_modules": [[343, null]], "mlx.nn.Module.load_weights": [[344, null]], "mlx.nn.Module.modules": [[345, null]], "mlx.nn.Module.named_modules": [[346, null]], "mlx.nn.Module.parameters": [[347, null]], "mlx.nn.Module.save_weights": [[348, null]], "mlx.nn.Module.set_dtype": [[349, null]], "mlx.nn.Module.state": [[350, null]], "mlx.nn.Module.train": [[351, null]], "mlx.nn.Module.trainable_parameters": [[352, null]], "mlx.nn.Module.training": [[353, null]], "mlx.nn.Module.unfreeze": [[354, null]], "mlx.nn.Module.update": [[355, null]], "mlx.nn.Module.update_modules": [[356, null]], "mlx.nn.MultiHeadAttention": [[357, null]], "mlx.nn.PReLU": [[358, null]], "mlx.nn.QuantizedEmbedding": [[359, null]], "mlx.nn.QuantizedLinear": [[360, null]], "mlx.nn.RMSNorm": [[361, null]], "mlx.nn.RNN": [[362, null]], "mlx.nn.ReLU": [[363, null]], "mlx.nn.ReLU6": [[364, null]], "mlx.nn.RoPE": [[365, null]], "mlx.nn.SELU": [[366, null]], "mlx.nn.Sequential": [[367, null]], "mlx.nn.SiLU": [[368, null]], "mlx.nn.SinusoidalPositionalEncoding": [[369, null]], "mlx.nn.Softmax": [[370, null]], "mlx.nn.Softmin": [[371, null]], "mlx.nn.Softplus": [[372, null]], "mlx.nn.Softshrink": [[373, null]], "mlx.nn.Softsign": [[374, null]], "mlx.nn.Step": [[375, null]], "mlx.nn.Tanh": [[376, null]], "mlx.nn.Transformer": [[377, null]], "mlx.nn.Upsample": [[378, null]], "mlx.nn.elu": [[387, null]], "mlx.nn.gelu": [[388, null]], "mlx.nn.gelu_approx": [[389, null]], "mlx.nn.gelu_fast_approx": [[390, null]], "mlx.nn.glu": [[391, null]], "mlx.nn.hard_shrink": [[392, null]], "mlx.nn.hard_tanh": [[393, null]], "mlx.nn.hardswish": [[394, null]], "mlx.nn.init.constant": [[379, null]], "mlx.nn.init.glorot_normal": [[380, null]], "mlx.nn.init.glorot_uniform": [[381, null]], "mlx.nn.init.he_normal": [[382, null]], "mlx.nn.init.he_uniform": [[383, null]], "mlx.nn.init.identity": [[384, null]], "mlx.nn.init.normal": [[385, null]], "mlx.nn.init.uniform": [[386, null]], "mlx.nn.leaky_relu": [[395, null]], "mlx.nn.log_sigmoid": [[396, null]], "mlx.nn.log_softmax": [[397, null]], "mlx.nn.losses.binary_cross_entropy": [[398, null]], "mlx.nn.losses.cosine_similarity_loss": [[399, null]], "mlx.nn.losses.cross_entropy": [[400, null]], "mlx.nn.losses.gaussian_nll_loss": [[401, null]], "mlx.nn.losses.hinge_loss": [[402, null]], "mlx.nn.losses.huber_loss": [[403, null]], "mlx.nn.losses.kl_div_loss": [[404, null]], "mlx.nn.losses.l1_loss": [[405, null]], "mlx.nn.losses.log_cosh_loss": [[406, null]], "mlx.nn.losses.margin_ranking_loss": [[407, null]], "mlx.nn.losses.mse_loss": [[408, null]], "mlx.nn.losses.nll_loss": [[409, null]], "mlx.nn.losses.smooth_l1_loss": [[410, null]], "mlx.nn.losses.triplet_loss": [[411, null]], "mlx.nn.mish": [[412, null]], "mlx.nn.prelu": [[413, null]], "mlx.nn.quantize": [[293, null]], "mlx.nn.relu": [[414, null]], "mlx.nn.relu6": [[415, null]], "mlx.nn.selu": [[416, null]], "mlx.nn.sigmoid": [[417, null]], "mlx.nn.silu": [[418, null]], "mlx.nn.softmax": [[419, null]], "mlx.nn.softmin": [[420, null]], "mlx.nn.softplus": [[421, null]], "mlx.nn.softshrink": [[422, null]], "mlx.nn.step": [[423, null]], "mlx.nn.tanh": [[424, null]], "mlx.nn.value_and_grad": [[294, null]], "mlx.optimizers.AdaDelta": [[432, null]], "mlx.optimizers.Adafactor": [[433, null]], "mlx.optimizers.Adagrad": [[434, null]], "mlx.optimizers.Adam": [[435, null]], "mlx.optimizers.AdamW": [[436, null]], "mlx.optimizers.Adamax": [[437, null]], "mlx.optimizers.Lion": [[438, null]], "mlx.optimizers.Optimizer.apply_gradients": [[439, null]], "mlx.optimizers.Optimizer.init": [[440, null]], "mlx.optimizers.Optimizer.state": [[441, null]], "mlx.optimizers.Optimizer.update": [[442, null]], "mlx.optimizers.RMSprop": [[443, null]], "mlx.optimizers.SGD": [[444, null]], "mlx.optimizers.clip_grad_norm": [[295, null]], "mlx.optimizers.cosine_decay": [[445, null]], "mlx.optimizers.exponential_decay": [[446, null]], "mlx.optimizers.join_schedules": [[447, null]], "mlx.optimizers.linear_schedule": [[448, null]], "mlx.optimizers.step_decay": [[449, null]], "mlx.utils.tree_flatten": [[296, null]], "mlx.utils.tree_map": [[297, null]], "mlx.utils.tree_map_with_path": [[298, null]], "mlx.utils.tree_reduce": [[299, null]], "mlx.utils.tree_unflatten": [[300, null]], "x86 Shell": [[8, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.affine_quantize", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.affine_quantize.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"__init__() (array method)": [[30, "mlx.core.array.__init__", false]], "__init__() (custom_function method)": [[108, "mlx.core.custom_function.__init__", false]], "__init__() (device method)": [[9, "mlx.core.Device.__init__", false]], "__init__() (dtype method)": [[10, "mlx.core.Dtype.__init__", false]], "__init__() (dtypecategory method)": [[11, "mlx.core.DtypeCategory.__init__", false]], "__init__() (group method)": [[116, "mlx.core.distributed.Group.__init__", false]], "__init__() (metal_kernel method)": [[139, "mlx.core.fast.metal_kernel.__init__", false]], "__init__() (stream method)": [[301, "mlx.core.Stream.__init__", false]], "abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "abs() (array method)": [[32, "mlx.core.array.abs", false]], "abs() (in module mlx.core)": [[12, "mlx.core.abs", false]], "adadelta (class in mlx.optimizers)": [[432, "mlx.optimizers.AdaDelta", false]], "adafactor (class in mlx.optimizers)": [[433, "mlx.optimizers.Adafactor", false]], "adagrad (class in mlx.optimizers)": [[434, "mlx.optimizers.Adagrad", false]], "adam (class in mlx.optimizers)": [[435, "mlx.optimizers.Adam", false]], "adamax (class in mlx.optimizers)": [[437, "mlx.optimizers.Adamax", false]], "adamw (class in mlx.optimizers)": [[436, "mlx.optimizers.AdamW", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "add() (in module mlx.core)": [[13, "mlx.core.add", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "addmm() (in module mlx.core)": [[14, "mlx.core.addmm", false]], "affine_quantize() (in module mlx.core.fast)": [[137, "mlx.core.fast.affine_quantize", false]], "alibi (class in mlx.nn)": [[311, "mlx.nn.ALiBi", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "all() (array method)": [[33, "mlx.core.array.all", false]], "all() (in module mlx.core)": [[15, "mlx.core.all", false]], "all_gather() (in module mlx.core.distributed)": [[117, "mlx.core.distributed.all_gather", false]], "all_sum() (in module mlx.core.distributed)": [[118, "mlx.core.distributed.all_sum", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "allclose() (in module mlx.core)": [[16, "mlx.core.allclose", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "any() (array method)": [[34, "mlx.core.array.any", false]], "any() (in module mlx.core)": [[17, "mlx.core.any", false]], "apply() (module method)": [[337, "mlx.nn.Module.apply", false]], "apply_gradients() (optimizer method)": [[439, "mlx.optimizers.Optimizer.apply_gradients", false]], "apply_to_modules() (module method)": [[338, "mlx.nn.Module.apply_to_modules", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arange() (in module mlx.core)": [[18, "mlx.core.arange", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccos() (in module mlx.core)": [[19, "mlx.core.arccos", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arccosh() (in module mlx.core)": [[20, "mlx.core.arccosh", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsin() (in module mlx.core)": [[21, "mlx.core.arcsin", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arcsinh() (in module mlx.core)": [[22, "mlx.core.arcsinh", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan() (in module mlx.core)": [[23, "mlx.core.arctan", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctan2() (in module mlx.core)": [[24, "mlx.core.arctan2", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "arctanh() (in module mlx.core)": [[25, "mlx.core.arctanh", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmax() (array method)": [[35, "mlx.core.array.argmax", false]], "argmax() (in module mlx.core)": [[26, "mlx.core.argmax", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argmin() (array method)": [[36, "mlx.core.array.argmin", false]], "argmin() (in module mlx.core)": [[27, "mlx.core.argmin", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argpartition() (in module mlx.core)": [[28, "mlx.core.argpartition", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "argsort() (in module mlx.core)": [[29, "mlx.core.argsort", false]], "array (class in mlx.core)": [[30, "mlx.core.array", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "array_equal() (in module mlx.core)": [[81, "mlx.core.array_equal", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", false]], "as_strided() (in module mlx.core)": [[82, "mlx.core.as_strided", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "astype() (array method)": [[37, "mlx.core.array.astype", false]], "at (array property)": [[38, "mlx.core.array.at", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_1d() (in module mlx.core)": [[83, "mlx.core.atleast_1d", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d() (in module mlx.core)": [[84, "mlx.core.atleast_2d", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d() (in module mlx.core)": [[85, "mlx.core.atleast_3d", false]], "avgpool1d (class in mlx.nn)": [[312, "mlx.nn.AvgPool1d", false]], "avgpool2d (class in mlx.nn)": [[313, "mlx.nn.AvgPool2d", false]], "batchnorm (class in mlx.nn)": [[314, "mlx.nn.BatchNorm", false]], "bernoulli() (in module mlx.core.random)": [[229, "mlx.core.random.bernoulli", false]], "binary_cross_entropy (class in mlx.nn.losses)": [[398, "mlx.nn.losses.binary_cross_entropy", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_and() (in module mlx.core)": [[86, "mlx.core.bitwise_and", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or() (in module mlx.core)": [[87, "mlx.core.bitwise_or", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor() (in module mlx.core)": [[88, "mlx.core.bitwise_xor", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "block_masked_mm() (in module mlx.core)": [[89, "mlx.core.block_masked_mm", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "broadcast_to() (in module mlx.core)": [[90, "mlx.core.broadcast_to", false]], "categorical() (in module mlx.core.random)": [[230, "mlx.core.random.categorical", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "ceil() (in module mlx.core)": [[91, "mlx.core.ceil", false]], "children() (module method)": [[339, "mlx.nn.Module.children", false]], "cholesky() (in module mlx.core.linalg)": [[177, "mlx.core.linalg.cholesky", false]], "cholesky_inv() (in module mlx.core.linalg)": [[178, "mlx.core.linalg.cholesky_inv", false]], "clear_cache() (in module mlx.core.metal)": [[200, "mlx.core.metal.clear_cache", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "clip() (in module mlx.core)": [[92, "mlx.core.clip", false]], "clip_grad_norm() (in module mlx.optimizers)": [[295, "mlx.optimizers.clip_grad_norm", false]], "compile() (in module mlx.core)": [[93, "mlx.core.compile", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "concatenate() (in module mlx.core)": [[94, "mlx.core.concatenate", false]], "conj() (array method)": [[39, "mlx.core.array.conj", false]], "conj() (in module mlx.core)": [[95, "mlx.core.conj", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conjugate() (in module mlx.core)": [[96, "mlx.core.conjugate", false]], "constant() (in module mlx.nn.init)": [[379, "mlx.nn.init.constant", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv1d (class in mlx.nn)": [[315, "mlx.nn.Conv1d", false]], "conv1d() (in module mlx.core)": [[97, "mlx.core.conv1d", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv2d (class in mlx.nn)": [[316, "mlx.nn.Conv2d", false]], "conv2d() (in module mlx.core)": [[98, "mlx.core.conv2d", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv3d (class in mlx.nn)": [[317, "mlx.nn.Conv3d", false]], "conv3d() (in module mlx.core)": [[99, "mlx.core.conv3d", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_general() (in module mlx.core)": [[100, "mlx.core.conv_general", false]], "convolve() (in module mlx.core)": [[101, "mlx.core.convolve", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cos() (array method)": [[40, "mlx.core.array.cos", false]], "cos() (in module mlx.core)": [[102, "mlx.core.cos", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cosh() (in module mlx.core)": [[103, "mlx.core.cosh", false]], "cosine_decay() (in module mlx.optimizers)": [[445, "mlx.optimizers.cosine_decay", false]], "cosine_similarity_loss (class in mlx.nn.losses)": [[399, "mlx.nn.losses.cosine_similarity_loss", false]], "cross_entropy (class in mlx.nn.losses)": [[400, "mlx.nn.losses.cross_entropy", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummax() (array method)": [[41, "mlx.core.array.cummax", false]], "cummax() (in module mlx.core)": [[104, "mlx.core.cummax", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cummin() (array method)": [[42, "mlx.core.array.cummin", false]], "cummin() (in module mlx.core)": [[105, "mlx.core.cummin", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumprod() (array method)": [[43, "mlx.core.array.cumprod", false]], "cumprod() (in module mlx.core)": [[106, "mlx.core.cumprod", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "cumsum() (array method)": [[44, "mlx.core.array.cumsum", false]], "cumsum() (in module mlx.core)": [[107, "mlx.core.cumsum", false]], "custom_function (class in mlx.core)": [[108, "mlx.core.custom_function", false]], "default_device() (in module mlx.core)": [[109, "mlx.core.default_device", false]], "default_stream() (in module mlx.core)": [[110, "mlx.core.default_stream", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "degrees() (in module mlx.core)": [[111, "mlx.core.degrees", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "dequantize() (in module mlx.core)": [[112, "mlx.core.dequantize", false]], "device (class in mlx.core)": [[9, "mlx.core.Device", false]], "device_info() (in module mlx.core.metal)": [[201, "mlx.core.metal.device_info", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diag() (array method)": [[45, "mlx.core.array.diag", false]], "diag() (in module mlx.core)": [[113, "mlx.core.diag", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "diagonal() (array method)": [[46, "mlx.core.array.diagonal", false]], "diagonal() (in module mlx.core)": [[114, "mlx.core.diagonal", false]], "disable_compile() (in module mlx.core)": [[115, "mlx.core.disable_compile", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divide() (in module mlx.core)": [[124, "mlx.core.divide", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "divmod() (in module mlx.core)": [[125, "mlx.core.divmod", false]], "dropout (class in mlx.nn)": [[318, "mlx.nn.Dropout", false]], "dropout2d (class in mlx.nn)": [[319, "mlx.nn.Dropout2d", false]], "dropout3d (class in mlx.nn)": [[320, "mlx.nn.Dropout3d", false]], "dtype (array property)": [[47, "mlx.core.array.dtype", false]], "dtype (class in mlx.core)": [[10, "mlx.core.Dtype", false]], "dtypecategory (class in mlx.core)": [[11, "mlx.core.DtypeCategory", false]], "einsum() (in module mlx.core)": [[126, "mlx.core.einsum", false]], "einsum_path() (in module mlx.core)": [[127, "mlx.core.einsum_path", false]], "elu (class in mlx.nn)": [[387, "mlx.nn.elu", false]], "embedding (class in mlx.nn)": [[321, "mlx.nn.Embedding", false]], "enable_compile() (in module mlx.core)": [[128, "mlx.core.enable_compile", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "equal() (in module mlx.core)": [[129, "mlx.core.equal", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erf() (in module mlx.core)": [[130, "mlx.core.erf", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "erfinv() (in module mlx.core)": [[131, "mlx.core.erfinv", false]], "eval() (in module mlx.core)": [[132, "mlx.core.eval", false]], "eval() (module method)": [[340, "mlx.nn.Module.eval", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "exp() (array method)": [[48, "mlx.core.array.exp", false]], "exp() (in module mlx.core)": [[133, "mlx.core.exp", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expand_dims() (in module mlx.core)": [[134, "mlx.core.expand_dims", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "expm1() (in module mlx.core)": [[135, "mlx.core.expm1", false]], "exponential_decay() (in module mlx.optimizers)": [[446, "mlx.optimizers.exponential_decay", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "eye() (in module mlx.core)": [[136, "mlx.core.eye", false]], "fft() (in module mlx.core.fft)": [[143, "mlx.core.fft.fft", false]], "fft2() (in module mlx.core.fft)": [[144, "mlx.core.fft.fft2", false]], "fftn() (in module mlx.core.fft)": [[145, "mlx.core.fft.fftn", false]], "filter_and_map() (module method)": [[341, "mlx.nn.Module.filter_and_map", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "flatten() (array method)": [[49, "mlx.core.array.flatten", false]], "flatten() (in module mlx.core)": [[155, "mlx.core.flatten", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor() (in module mlx.core)": [[156, "mlx.core.floor", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "floor_divide() (in module mlx.core)": [[157, "mlx.core.floor_divide", false]], "freeze() (module method)": [[342, "mlx.nn.Module.freeze", false]], "full (c++ function)": [[0, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", false], [0, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", false]], "full() (in module mlx.core)": [[158, "mlx.core.full", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "gather_mm() (in module mlx.core)": [[159, "mlx.core.gather_mm", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", false]], "gather_qmm() (in module mlx.core)": [[160, "mlx.core.gather_qmm", false]], "gaussian_nll_loss (class in mlx.nn.losses)": [[401, "mlx.nn.losses.gaussian_nll_loss", false]], "gelu (class in mlx.nn)": [[322, "mlx.nn.GELU", false], [388, "mlx.nn.gelu", false]], "gelu_approx (class in mlx.nn)": [[389, "mlx.nn.gelu_approx", false]], "gelu_fast_approx (class in mlx.nn)": [[390, "mlx.nn.gelu_fast_approx", false]], "get_active_memory() (in module mlx.core.metal)": [[202, "mlx.core.metal.get_active_memory", false]], "get_cache_memory() (in module mlx.core.metal)": [[203, "mlx.core.metal.get_cache_memory", false]], "get_peak_memory() (in module mlx.core.metal)": [[204, "mlx.core.metal.get_peak_memory", false]], "glorot_normal() (in module mlx.nn.init)": [[380, "mlx.nn.init.glorot_normal", false]], "glorot_uniform() (in module mlx.nn.init)": [[381, "mlx.nn.init.glorot_uniform", false]], "glu (class in mlx.nn)": [[323, "mlx.nn.GLU", false], [391, "mlx.nn.glu", false]], "grad() (in module mlx.core)": [[161, "mlx.core.grad", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater() (in module mlx.core)": [[162, "mlx.core.greater", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "greater_equal() (in module mlx.core)": [[163, "mlx.core.greater_equal", false]], "group (class in mlx.core.distributed)": [[116, "mlx.core.distributed.Group", false]], "groupnorm (class in mlx.nn)": [[325, "mlx.nn.GroupNorm", false]], "gru (class in mlx.nn)": [[324, "mlx.nn.GRU", false]], "gumbel() (in module mlx.core.random)": [[231, "mlx.core.random.gumbel", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "hadamard_transform() (in module mlx.core)": [[164, "mlx.core.hadamard_transform", false]], "hard_shrink (class in mlx.nn)": [[392, "mlx.nn.hard_shrink", false]], "hard_tanh (class in mlx.nn)": [[393, "mlx.nn.hard_tanh", false]], "hardshrink (class in mlx.nn)": [[326, "mlx.nn.HardShrink", false]], "hardswish (class in mlx.nn)": [[328, "mlx.nn.Hardswish", false], [394, "mlx.nn.hardswish", false]], "hardtanh (class in mlx.nn)": [[327, "mlx.nn.HardTanh", false]], "he_normal() (in module mlx.nn.init)": [[382, "mlx.nn.init.he_normal", false]], "he_uniform() (in module mlx.nn.init)": [[383, "mlx.nn.init.he_uniform", false]], "hinge_loss (class in mlx.nn.losses)": [[402, "mlx.nn.losses.hinge_loss", false]], "huber_loss (class in mlx.nn.losses)": [[403, "mlx.nn.losses.huber_loss", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "identity() (in module mlx.core)": [[165, "mlx.core.identity", false]], "identity() (in module mlx.nn.init)": [[384, "mlx.nn.init.identity", false]], "ifft() (in module mlx.core.fft)": [[146, "mlx.core.fft.ifft", false]], "ifft2() (in module mlx.core.fft)": [[147, "mlx.core.fft.ifft2", false]], "ifftn() (in module mlx.core.fft)": [[148, "mlx.core.fft.ifftn", false]], "init() (in module mlx.core.distributed)": [[119, "mlx.core.distributed.init", false]], "init() (optimizer method)": [[440, "mlx.optimizers.Optimizer.init", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "inner() (in module mlx.core)": [[166, "mlx.core.inner", false]], "instancenorm (class in mlx.nn)": [[329, "mlx.nn.InstanceNorm", false]], "inv() (in module mlx.core.linalg)": [[179, "mlx.core.linalg.inv", false]], "irfft() (in module mlx.core.fft)": [[149, "mlx.core.fft.irfft", false]], "irfft2() (in module mlx.core.fft)": [[150, "mlx.core.fft.irfft2", false]], "irfftn() (in module mlx.core.fft)": [[151, "mlx.core.fft.irfftn", false]], "is_available() (in module mlx.core.distributed)": [[120, "mlx.core.distributed.is_available", false]], "is_available() (in module mlx.core.metal)": [[205, "mlx.core.metal.is_available", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isclose() (in module mlx.core)": [[167, "mlx.core.isclose", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isinf() (in module mlx.core)": [[168, "mlx.core.isinf", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isnan() (in module mlx.core)": [[169, "mlx.core.isnan", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isneginf() (in module mlx.core)": [[170, "mlx.core.isneginf", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "isposinf() (in module mlx.core)": [[171, "mlx.core.isposinf", false]], "issubdtype() (in module mlx.core)": [[172, "mlx.core.issubdtype", false]], "item() (array method)": [[50, "mlx.core.array.item", false]], "itemsize (array property)": [[51, "mlx.core.array.itemsize", false]], "join_schedules() (in module mlx.optimizers)": [[447, "mlx.optimizers.join_schedules", false]], "jvp() (in module mlx.core)": [[173, "mlx.core.jvp", false]], "key() (in module mlx.core.random)": [[232, "mlx.core.random.key", false]], "kl_div_loss (class in mlx.nn.losses)": [[404, "mlx.nn.losses.kl_div_loss", false]], "l1_loss (class in mlx.nn.losses)": [[405, "mlx.nn.losses.l1_loss", false]], "laplace() (in module mlx.core.random)": [[233, "mlx.core.random.laplace", false]], "layer_norm() (in module mlx.core.fast)": [[138, "mlx.core.fast.layer_norm", false]], "layernorm (class in mlx.nn)": [[331, "mlx.nn.LayerNorm", false]], "leaf_modules() (module method)": [[343, "mlx.nn.Module.leaf_modules", false]], "leaky_relu (class in mlx.nn)": [[395, "mlx.nn.leaky_relu", false]], "leakyrelu (class in mlx.nn)": [[332, "mlx.nn.LeakyReLU", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "left_shift() (in module mlx.core)": [[174, "mlx.core.left_shift", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less() (in module mlx.core)": [[175, "mlx.core.less", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "less_equal() (in module mlx.core)": [[176, "mlx.core.less_equal", false]], "linear (class in mlx.nn)": [[333, "mlx.nn.Linear", false]], "linear_schedule() (in module mlx.optimizers)": [[448, "mlx.optimizers.linear_schedule", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "linspace() (in module mlx.core)": [[184, "mlx.core.linspace", false]], "lion (class in mlx.optimizers)": [[438, "mlx.optimizers.Lion", false]], "load() (in module mlx.core)": [[185, "mlx.core.load", false]], "load_weights() (module method)": [[344, "mlx.nn.Module.load_weights", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log() (array method)": [[52, "mlx.core.array.log", false]], "log() (in module mlx.core)": [[186, "mlx.core.log", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log10() (array method)": [[53, "mlx.core.array.log10", false]], "log10() (in module mlx.core)": [[187, "mlx.core.log10", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log1p() (array method)": [[54, "mlx.core.array.log1p", false]], "log1p() (in module mlx.core)": [[188, "mlx.core.log1p", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "log2() (array method)": [[55, "mlx.core.array.log2", false]], "log2() (in module mlx.core)": [[189, "mlx.core.log2", false]], "log_cosh_loss (class in mlx.nn.losses)": [[406, "mlx.nn.losses.log_cosh_loss", false]], "log_sigmoid (class in mlx.nn)": [[396, "mlx.nn.log_sigmoid", false]], "log_softmax (class in mlx.nn)": [[397, "mlx.nn.log_softmax", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logaddexp() (in module mlx.core)": [[190, "mlx.core.logaddexp", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_and() (in module mlx.core)": [[191, "mlx.core.logical_and", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_not() (in module mlx.core)": [[192, "mlx.core.logical_not", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logical_or() (in module mlx.core)": [[193, "mlx.core.logical_or", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "logsumexp() (array method)": [[56, "mlx.core.array.logsumexp", false]], "logsumexp() (in module mlx.core)": [[194, "mlx.core.logsumexp", false]], "lstm (class in mlx.nn)": [[330, "mlx.nn.LSTM", false]], "margin_ranking_loss (class in mlx.nn.losses)": [[407, "mlx.nn.losses.margin_ranking_loss", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "matmul() (in module mlx.core)": [[195, "mlx.core.matmul", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "max() (array method)": [[57, "mlx.core.array.max", false]], "max() (in module mlx.core)": [[196, "mlx.core.max", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "maximum() (in module mlx.core)": [[197, "mlx.core.maximum", false]], "maxpool1d (class in mlx.nn)": [[334, "mlx.nn.MaxPool1d", false]], "maxpool2d (class in mlx.nn)": [[335, "mlx.nn.MaxPool2d", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "mean() (array method)": [[58, "mlx.core.array.mean", false]], "mean() (in module mlx.core)": [[198, "mlx.core.mean", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", false]], "meshgrid() (in module mlx.core)": [[199, "mlx.core.meshgrid", false]], "metal_kernel (class in mlx.core.fast)": [[139, "mlx.core.fast.metal_kernel", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "min() (array method)": [[59, "mlx.core.array.min", false]], "min() (in module mlx.core)": [[211, "mlx.core.min", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "minimum() (in module mlx.core)": [[212, "mlx.core.minimum", false]], "mish (class in mlx.nn)": [[336, "mlx.nn.Mish", false], [412, "mlx.nn.mish", false]], "module (class in mlx.nn)": [[429, "mlx.nn.Module", false]], "modules() (module method)": [[345, "mlx.nn.Module.modules", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "moveaxis() (array method)": [[60, "mlx.core.array.moveaxis", false]], "moveaxis() (in module mlx.core)": [[213, "mlx.core.moveaxis", false]], "mse_loss (class in mlx.nn.losses)": [[408, "mlx.nn.losses.mse_loss", false]], "multiheadattention (class in mlx.nn)": [[357, "mlx.nn.MultiHeadAttention", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "multiply() (in module mlx.core)": [[214, "mlx.core.multiply", false]], "multivariate_normal() (in module mlx.core.random)": [[234, "mlx.core.random.multivariate_normal", false]], "named_modules() (module method)": [[346, "mlx.nn.Module.named_modules", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", false]], "nan_to_num() (in module mlx.core)": [[215, "mlx.core.nan_to_num", false]], "nbytes (array property)": [[61, "mlx.core.array.nbytes", false]], "ndim (array property)": [[62, "mlx.core.array.ndim", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "negative() (in module mlx.core)": [[216, "mlx.core.negative", false]], "new_stream() (in module mlx.core)": [[217, "mlx.core.new_stream", false]], "nll_loss (class in mlx.nn.losses)": [[409, "mlx.nn.losses.nll_loss", false]], "norm() (in module mlx.core.linalg)": [[180, "mlx.core.linalg.norm", false]], "normal() (in module mlx.core.random)": [[235, "mlx.core.random.normal", false]], "normal() (in module mlx.nn.init)": [[385, "mlx.nn.init.normal", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "not_equal() (in module mlx.core)": [[218, "mlx.core.not_equal", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", false]], "ones() (in module mlx.core)": [[219, "mlx.core.ones", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "ones_like() (in module mlx.core)": [[220, "mlx.core.ones_like", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "optimizer (class in mlx.optimizers)": [[451, "mlx.optimizers.Optimizer", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "outer() (in module mlx.core)": [[221, "mlx.core.outer", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", false]], "pad() (in module mlx.core)": [[222, "mlx.core.pad", false]], "parameters() (module method)": [[347, "mlx.nn.Module.parameters", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "partition() (in module mlx.core)": [[223, "mlx.core.partition", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "power() (in module mlx.core)": [[224, "mlx.core.power", false]], "prelu (class in mlx.nn)": [[358, "mlx.nn.PReLU", false], [413, "mlx.nn.prelu", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "prod() (array method)": [[63, "mlx.core.array.prod", false]], "prod() (in module mlx.core)": [[225, "mlx.core.prod", false]], "qr() (in module mlx.core.linalg)": [[181, "mlx.core.linalg.qr", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantize() (in module mlx.core)": [[226, "mlx.core.quantize", false]], "quantize() (in module mlx.nn)": [[293, "mlx.nn.quantize", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", false]], "quantized_matmul() (in module mlx.core)": [[227, "mlx.core.quantized_matmul", false]], "quantizedembedding (class in mlx.nn)": [[359, "mlx.nn.QuantizedEmbedding", false]], "quantizedlinear (class in mlx.nn)": [[360, "mlx.nn.QuantizedLinear", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "radians() (in module mlx.core)": [[228, "mlx.core.radians", false]], "randint() (in module mlx.core.random)": [[236, "mlx.core.random.randint", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "reciprocal() (array method)": [[64, "mlx.core.array.reciprocal", false]], "reciprocal() (in module mlx.core)": [[241, "mlx.core.reciprocal", false]], "recv() (in module mlx.core.distributed)": [[121, "mlx.core.distributed.recv", false]], "recv_like() (in module mlx.core.distributed)": [[122, "mlx.core.distributed.recv_like", false]], "relu (class in mlx.nn)": [[363, "mlx.nn.ReLU", false], [414, "mlx.nn.relu", false]], "relu6 (class in mlx.nn)": [[364, "mlx.nn.ReLU6", false], [415, "mlx.nn.relu6", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "remainder() (in module mlx.core)": [[242, "mlx.core.remainder", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "repeat() (in module mlx.core)": [[243, "mlx.core.repeat", false]], "reset_peak_memory() (in module mlx.core.metal)": [[206, "mlx.core.metal.reset_peak_memory", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "reshape() (array method)": [[65, "mlx.core.array.reshape", false]], "reshape() (in module mlx.core)": [[244, "mlx.core.reshape", false]], "rfft() (in module mlx.core.fft)": [[152, "mlx.core.fft.rfft", false]], "rfft2() (in module mlx.core.fft)": [[153, "mlx.core.fft.rfft2", false]], "rfftn() (in module mlx.core.fft)": [[154, "mlx.core.fft.rfftn", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "right_shift() (in module mlx.core)": [[245, "mlx.core.right_shift", false]], "rms_norm() (in module mlx.core.fast)": [[140, "mlx.core.fast.rms_norm", false]], "rmsnorm (class in mlx.nn)": [[361, "mlx.nn.RMSNorm", false]], "rmsprop (class in mlx.optimizers)": [[443, "mlx.optimizers.RMSprop", false]], "rnn (class in mlx.nn)": [[362, "mlx.nn.RNN", false]], "rope (class in mlx.nn)": [[365, "mlx.nn.RoPE", false]], "rope() (in module mlx.core.fast)": [[141, "mlx.core.fast.rope", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "round() (array method)": [[66, "mlx.core.array.round", false]], "round() (in module mlx.core)": [[246, "mlx.core.round", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "rsqrt() (array method)": [[67, "mlx.core.array.rsqrt", false]], "rsqrt() (in module mlx.core)": [[247, "mlx.core.rsqrt", false]], "save() (in module mlx.core)": [[248, "mlx.core.save", false]], "save_gguf() (in module mlx.core)": [[249, "mlx.core.save_gguf", false]], "save_safetensors() (in module mlx.core)": [[250, "mlx.core.save_safetensors", false]], "save_weights() (module method)": [[348, "mlx.nn.Module.save_weights", false]], "savez() (in module mlx.core)": [[251, "mlx.core.savez", false]], "savez_compressed() (in module mlx.core)": [[252, "mlx.core.savez_compressed", false]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[142, "mlx.core.fast.scaled_dot_product_attention", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "seed() (in module mlx.core.random)": [[237, "mlx.core.random.seed", false]], "selu (class in mlx.nn)": [[366, "mlx.nn.SELU", false], [416, "mlx.nn.selu", false]], "send() (in module mlx.core.distributed)": [[123, "mlx.core.distributed.send", false]], "sequential (class in mlx.nn)": [[367, "mlx.nn.Sequential", false]], "set_cache_limit() (in module mlx.core.metal)": [[207, "mlx.core.metal.set_cache_limit", false]], "set_default_device() (in module mlx.core)": [[253, "mlx.core.set_default_device", false]], "set_default_stream() (in module mlx.core)": [[254, "mlx.core.set_default_stream", false]], "set_dtype() (module method)": [[349, "mlx.nn.Module.set_dtype", false]], "set_memory_limit() (in module mlx.core.metal)": [[208, "mlx.core.metal.set_memory_limit", false]], "sgd (class in mlx.optimizers)": [[444, "mlx.optimizers.SGD", false]], "shape (array property)": [[68, "mlx.core.array.shape", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sigmoid (class in mlx.nn)": [[417, "mlx.nn.sigmoid", false]], "sigmoid() (in module mlx.core)": [[255, "mlx.core.sigmoid", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sign() (in module mlx.core)": [[256, "mlx.core.sign", false]], "silu (class in mlx.nn)": [[368, "mlx.nn.SiLU", false], [418, "mlx.nn.silu", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sin() (array method)": [[69, "mlx.core.array.sin", false]], "sin() (in module mlx.core)": [[257, "mlx.core.sin", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "sinh() (in module mlx.core)": [[258, "mlx.core.sinh", false]], "sinusoidalpositionalencoding (class in mlx.nn)": [[369, "mlx.nn.SinusoidalPositionalEncoding", false]], "size (array property)": [[70, "mlx.core.array.size", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", false]], "smooth_l1_loss (class in mlx.nn.losses)": [[410, "mlx.nn.losses.smooth_l1_loss", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "softmax (class in mlx.nn)": [[370, "mlx.nn.Softmax", false], [419, "mlx.nn.softmax", false]], "softmax() (in module mlx.core)": [[259, "mlx.core.softmax", false]], "softmin (class in mlx.nn)": [[371, "mlx.nn.Softmin", false], [420, "mlx.nn.softmin", false]], "softplus (class in mlx.nn)": [[372, "mlx.nn.Softplus", false], [421, "mlx.nn.softplus", false]], "softshrink (class in mlx.nn)": [[373, "mlx.nn.Softshrink", false], [422, "mlx.nn.softshrink", false]], "softsign (class in mlx.nn)": [[374, "mlx.nn.Softsign", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "sort() (in module mlx.core)": [[260, "mlx.core.sort", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "split() (array method)": [[71, "mlx.core.array.split", false]], "split() (in module mlx.core)": [[261, "mlx.core.split", false]], "split() (in module mlx.core.random)": [[238, "mlx.core.random.split", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "sqrt() (array method)": [[72, "mlx.core.array.sqrt", false]], "sqrt() (in module mlx.core)": [[262, "mlx.core.sqrt", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "square() (array method)": [[73, "mlx.core.array.square", false]], "square() (in module mlx.core)": [[263, "mlx.core.square", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "squeeze() (array method)": [[74, "mlx.core.array.squeeze", false]], "squeeze() (in module mlx.core)": [[264, "mlx.core.squeeze", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "stack() (in module mlx.core)": [[265, "mlx.core.stack", false]], "start_capture() (in module mlx.core.metal)": [[209, "mlx.core.metal.start_capture", false]], "state (module property)": [[350, "mlx.nn.Module.state", false]], "state (optimizer property)": [[441, "mlx.optimizers.Optimizer.state", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "std() (in module mlx.core)": [[266, "mlx.core.std", false]], "step (class in mlx.nn)": [[375, "mlx.nn.Step", false], [423, "mlx.nn.step", false]], "step_decay() (in module mlx.optimizers)": [[449, "mlx.optimizers.step_decay", false]], "stop_capture() (in module mlx.core.metal)": [[210, "mlx.core.metal.stop_capture", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "stop_gradient() (in module mlx.core)": [[267, "mlx.core.stop_gradient", false]], "stream (class in mlx.core)": [[301, "mlx.core.Stream", false]], "stream() (in module mlx.core)": [[268, "mlx.core.stream", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "subtract() (in module mlx.core)": [[269, "mlx.core.subtract", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "sum() (array method)": [[75, "mlx.core.array.sum", false]], "sum() (in module mlx.core)": [[270, "mlx.core.sum", false]], "svd() (in module mlx.core.linalg)": [[182, "mlx.core.linalg.svd", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "swapaxes() (array method)": [[76, "mlx.core.array.swapaxes", false]], "swapaxes() (in module mlx.core)": [[271, "mlx.core.swapaxes", false]], "synchronize() (in module mlx.core)": [[272, "mlx.core.synchronize", false]], "t (array property)": [[31, "mlx.core.array.T", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false]], "take() (in module mlx.core)": [[273, "mlx.core.take", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis() (in module mlx.core)": [[274, "mlx.core.take_along_axis", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tan() (in module mlx.core)": [[275, "mlx.core.tan", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tanh (class in mlx.nn)": [[376, "mlx.nn.Tanh", false], [424, "mlx.nn.tanh", false]], "tanh() (in module mlx.core)": [[276, "mlx.core.tanh", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tensordot() (in module mlx.core)": [[277, "mlx.core.tensordot", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tile() (in module mlx.core)": [[278, "mlx.core.tile", false]], "tolist() (array method)": [[77, "mlx.core.array.tolist", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "topk() (in module mlx.core)": [[279, "mlx.core.topk", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "trace() (in module mlx.core)": [[280, "mlx.core.trace", false]], "train() (module method)": [[351, "mlx.nn.Module.train", false]], "trainable_parameters() (module method)": [[352, "mlx.nn.Module.trainable_parameters", false]], "training (module property)": [[353, "mlx.nn.Module.training", false]], "transformer (class in mlx.nn)": [[377, "mlx.nn.Transformer", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "transpose() (array method)": [[78, "mlx.core.array.transpose", false]], "transpose() (in module mlx.core)": [[281, "mlx.core.transpose", false]], "tree_flatten() (in module mlx.utils)": [[296, "mlx.utils.tree_flatten", false]], "tree_map() (in module mlx.utils)": [[297, "mlx.utils.tree_map", false]], "tree_map_with_path() (in module mlx.utils)": [[298, "mlx.utils.tree_map_with_path", false]], "tree_reduce() (in module mlx.utils)": [[299, "mlx.utils.tree_reduce", false]], "tree_unflatten() (in module mlx.utils)": [[300, "mlx.utils.tree_unflatten", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tri() (in module mlx.core)": [[282, "mlx.core.tri", false]], "tri_inv() (in module mlx.core.linalg)": [[183, "mlx.core.linalg.tri_inv", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "tril() (in module mlx.core)": [[283, "mlx.core.tril", false]], "triplet_loss (class in mlx.nn.losses)": [[411, "mlx.nn.losses.triplet_loss", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "triu() (in module mlx.core)": [[284, "mlx.core.triu", false]], "truncated_normal() (in module mlx.core.random)": [[239, "mlx.core.random.truncated_normal", false]], "unfreeze() (module method)": [[354, "mlx.nn.Module.unfreeze", false]], "uniform() (in module mlx.core.random)": [[240, "mlx.core.random.uniform", false]], "uniform() (in module mlx.nn.init)": [[386, "mlx.nn.init.uniform", false]], "update() (module method)": [[355, "mlx.nn.Module.update", false]], "update() (optimizer method)": [[442, "mlx.optimizers.Optimizer.update", false]], "update_modules() (module method)": [[356, "mlx.nn.Module.update_modules", false]], "upsample (class in mlx.nn)": [[378, "mlx.nn.Upsample", false]], "value_and_grad() (in module mlx.core)": [[285, "mlx.core.value_and_grad", false]], "value_and_grad() (in module mlx.nn)": [[294, "mlx.nn.value_and_grad", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "var() (array method)": [[79, "mlx.core.array.var", false]], "var() (in module mlx.core)": [[286, "mlx.core.var", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "view() (array method)": [[80, "mlx.core.array.view", false]], "view() (in module mlx.core)": [[287, "mlx.core.view", false]], "vjp() (in module mlx.core)": [[288, "mlx.core.vjp", false]], "vmap() (in module mlx.core)": [[289, "mlx.core.vmap", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "where() (in module mlx.core)": [[290, "mlx.core.where", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", false]], "zeros() (in module mlx.core)": [[291, "mlx.core.zeros", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]], "zeros_like() (in module mlx.core)": [[292, "mlx.core.zeros_like", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5arrayNSt6vectorIiEENSt6vectorI6size_tEE6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateRKNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5arrayNSt6vectorIiEE1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44fullNSt6vectorIiEE5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfRKNSt8optionalIfEERKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRKNSt6vectorIiEE5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEERKNSt6vectorIiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmulRK5arrayRK5arrayRK5arrayRK5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5arrayNSt6vectorIiEE14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRKNSt6vectorIiEEi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRKNSt6vectorIiEE5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[9, 3, 1, "", "Device"], [10, 3, 1, "", "Dtype"], [11, 3, 1, "", "DtypeCategory"], [301, 3, 1, "", "Stream"], [12, 5, 1, "", "abs"], [13, 5, 1, "", "add"], [14, 5, 1, "", "addmm"], [15, 5, 1, "", "all"], [16, 5, 1, "", "allclose"], [17, 5, 1, "", "any"], [18, 5, 1, "", "arange"], [19, 5, 1, "", "arccos"], [20, 5, 1, "", "arccosh"], [21, 5, 1, "", "arcsin"], [22, 5, 1, "", "arcsinh"], [23, 5, 1, "", "arctan"], [24, 5, 1, "", "arctan2"], [25, 5, 1, "", "arctanh"], [26, 5, 1, "", "argmax"], [27, 5, 1, "", "argmin"], [28, 5, 1, "", "argpartition"], [29, 5, 1, "", "argsort"], [30, 3, 1, "", "array"], [81, 5, 1, "", "array_equal"], [82, 5, 1, "", "as_strided"], [83, 5, 1, "", "atleast_1d"], [84, 5, 1, "", "atleast_2d"], [85, 5, 1, "", "atleast_3d"], [86, 5, 1, "", "bitwise_and"], [87, 5, 1, "", "bitwise_or"], [88, 5, 1, "", "bitwise_xor"], [89, 5, 1, "", "block_masked_mm"], [90, 5, 1, "", "broadcast_to"], [91, 5, 1, "", "ceil"], [92, 5, 1, "", "clip"], [93, 5, 1, "", "compile"], [94, 5, 1, "", "concatenate"], [95, 5, 1, "", "conj"], [96, 5, 1, "", "conjugate"], [97, 5, 1, "", "conv1d"], [98, 5, 1, "", "conv2d"], [99, 5, 1, "", "conv3d"], [100, 5, 1, "", "conv_general"], [101, 5, 1, "", "convolve"], [102, 5, 1, "", "cos"], [103, 5, 1, "", "cosh"], [104, 5, 1, "", "cummax"], [105, 5, 1, "", "cummin"], [106, 5, 1, "", "cumprod"], [107, 5, 1, "", "cumsum"], [108, 3, 1, "", "custom_function"], [109, 5, 1, "", "default_device"], [110, 5, 1, "", "default_stream"], [111, 5, 1, "", "degrees"], [112, 5, 1, "", "dequantize"], [113, 5, 1, "", "diag"], [114, 5, 1, "", "diagonal"], [115, 5, 1, "", "disable_compile"], [124, 5, 1, "", "divide"], [125, 5, 1, "", "divmod"], [126, 5, 1, "", "einsum"], [127, 5, 1, "", "einsum_path"], [128, 5, 1, "", "enable_compile"], [129, 5, 1, "", "equal"], [130, 5, 1, "", "erf"], [131, 5, 1, "", "erfinv"], [132, 5, 1, "", "eval"], [133, 5, 1, "", "exp"], [134, 5, 1, "", "expand_dims"], [135, 5, 1, "", "expm1"], [136, 5, 1, "", "eye"], [155, 5, 1, "", "flatten"], [156, 5, 1, "", "floor"], [157, 5, 1, "", "floor_divide"], [158, 5, 1, "", "full"], [159, 5, 1, "", "gather_mm"], [160, 5, 1, "", "gather_qmm"], [161, 5, 1, "", "grad"], [162, 5, 1, "", "greater"], [163, 5, 1, "", "greater_equal"], [164, 5, 1, "", "hadamard_transform"], [165, 5, 1, "", "identity"], [166, 5, 1, "", "inner"], [167, 5, 1, "", "isclose"], [168, 5, 1, "", "isinf"], [169, 5, 1, "", "isnan"], [170, 5, 1, "", "isneginf"], [171, 5, 1, "", "isposinf"], [172, 5, 1, "", "issubdtype"], [173, 5, 1, "", "jvp"], [174, 5, 1, "", "left_shift"], [175, 5, 1, "", "less"], [176, 5, 1, "", "less_equal"], [184, 5, 1, "", "linspace"], [185, 5, 1, "", "load"], [186, 5, 1, "", "log"], [187, 5, 1, "", "log10"], [188, 5, 1, "", "log1p"], [189, 5, 1, "", "log2"], [190, 5, 1, "", "logaddexp"], [191, 5, 1, "", "logical_and"], [192, 5, 1, "", "logical_not"], [193, 5, 1, "", "logical_or"], [194, 5, 1, "", "logsumexp"], [195, 5, 1, "", "matmul"], [196, 5, 1, "", "max"], [197, 5, 1, "", "maximum"], [198, 5, 1, "", "mean"], [199, 5, 1, "", "meshgrid"], [211, 5, 1, "", "min"], [212, 5, 1, "", "minimum"], [213, 5, 1, "", "moveaxis"], [214, 5, 1, "", "multiply"], [215, 5, 1, "", "nan_to_num"], [216, 5, 1, "", "negative"], [217, 5, 1, "", "new_stream"], [218, 5, 1, "", "not_equal"], [219, 5, 1, "", "ones"], [220, 5, 1, "", "ones_like"], [221, 5, 1, "", "outer"], [222, 5, 1, "", "pad"], [223, 5, 1, "", "partition"], [224, 5, 1, "", "power"], [225, 5, 1, "", "prod"], [226, 5, 1, "", "quantize"], [227, 5, 1, "", "quantized_matmul"], [228, 5, 1, "", "radians"], [241, 5, 1, "", "reciprocal"], [242, 5, 1, "", "remainder"], [243, 5, 1, "", "repeat"], [244, 5, 1, "", "reshape"], [245, 5, 1, "", "right_shift"], [246, 5, 1, "", "round"], [247, 5, 1, "", "rsqrt"], [248, 5, 1, "", "save"], [249, 5, 1, "", "save_gguf"], [250, 5, 1, "", "save_safetensors"], [251, 5, 1, "", "savez"], [252, 5, 1, "", "savez_compressed"], [253, 5, 1, "", "set_default_device"], [254, 5, 1, "", "set_default_stream"], [255, 5, 1, "", "sigmoid"], [256, 5, 1, "", "sign"], [257, 5, 1, "", "sin"], [258, 5, 1, "", "sinh"], [259, 5, 1, "", "softmax"], [260, 5, 1, "", "sort"], [261, 5, 1, "", "split"], [262, 5, 1, "", "sqrt"], [263, 5, 1, "", "square"], [264, 5, 1, "", "squeeze"], [265, 5, 1, "", "stack"], [266, 5, 1, "", "std"], [267, 5, 1, "", "stop_gradient"], [268, 5, 1, "", "stream"], [269, 5, 1, "", "subtract"], [270, 5, 1, "", "sum"], [271, 5, 1, "", "swapaxes"], [272, 5, 1, "", "synchronize"], [273, 5, 1, "", "take"], [274, 5, 1, "", "take_along_axis"], [275, 5, 1, "", "tan"], [276, 5, 1, "", "tanh"], [277, 5, 1, "", "tensordot"], [278, 5, 1, "", "tile"], [279, 5, 1, "", "topk"], [280, 5, 1, "", "trace"], [281, 5, 1, "", "transpose"], [282, 5, 1, "", "tri"], [283, 5, 1, "", "tril"], [284, 5, 1, "", "triu"], [285, 5, 1, "", "value_and_grad"], [286, 5, 1, "", "var"], [287, 5, 1, "", "view"], [288, 5, 1, "", "vjp"], [289, 5, 1, "", "vmap"], [290, 5, 1, "", "where"], [291, 5, 1, "", "zeros"], [292, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[9, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[10, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[11, 4, 1, "", "__init__"]], "mlx.core.Stream": [[301, 4, 1, "", "__init__"]], "mlx.core.array": [[31, 6, 1, "", "T"], [30, 4, 1, "", "__init__"], [32, 4, 1, "", "abs"], [33, 4, 1, "", "all"], [34, 4, 1, "", "any"], [35, 4, 1, "", "argmax"], [36, 4, 1, "", "argmin"], [37, 4, 1, "", "astype"], [38, 6, 1, "", "at"], [39, 4, 1, "", "conj"], [40, 4, 1, "", "cos"], [41, 4, 1, "", "cummax"], [42, 4, 1, "", "cummin"], [43, 4, 1, "", "cumprod"], [44, 4, 1, "", "cumsum"], [45, 4, 1, "", "diag"], [46, 4, 1, "", "diagonal"], [47, 6, 1, "", "dtype"], [48, 4, 1, "", "exp"], [49, 4, 1, "", "flatten"], [50, 4, 1, "", "item"], [51, 6, 1, "", "itemsize"], [52, 4, 1, "", "log"], [53, 4, 1, "", "log10"], [54, 4, 1, "", "log1p"], [55, 4, 1, "", "log2"], [56, 4, 1, "", "logsumexp"], [57, 4, 1, "", "max"], [58, 4, 1, "", "mean"], [59, 4, 1, "", "min"], [60, 4, 1, "", "moveaxis"], [61, 6, 1, "", "nbytes"], [62, 6, 1, "", "ndim"], [63, 4, 1, "", "prod"], [64, 4, 1, "", "reciprocal"], [65, 4, 1, "", "reshape"], [66, 4, 1, "", "round"], [67, 4, 1, "", "rsqrt"], [68, 6, 1, "", "shape"], [69, 4, 1, "", "sin"], [70, 6, 1, "", "size"], [71, 4, 1, "", "split"], [72, 4, 1, "", "sqrt"], [73, 4, 1, "", "square"], [74, 4, 1, "", "squeeze"], [75, 4, 1, "", "sum"], [76, 4, 1, "", "swapaxes"], [77, 4, 1, "", "tolist"], [78, 4, 1, "", "transpose"], [79, 4, 1, "", "var"], [80, 4, 1, "", "view"]], "mlx.core.custom_function": [[108, 4, 1, "", "__init__"]], "mlx.core.distributed": [[116, 3, 1, "", "Group"], [117, 5, 1, "", "all_gather"], [118, 5, 1, "", "all_sum"], [119, 5, 1, "", "init"], [120, 5, 1, "", "is_available"], [121, 5, 1, "", "recv"], [122, 5, 1, "", "recv_like"], [123, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[116, 4, 1, "", "__init__"]], "mlx.core.fast": [[137, 5, 1, "", "affine_quantize"], [138, 5, 1, "", "layer_norm"], [139, 3, 1, "", "metal_kernel"], [140, 5, 1, "", "rms_norm"], [141, 5, 1, "", "rope"], [142, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fast.metal_kernel": [[139, 4, 1, "", "__init__"]], "mlx.core.fft": [[143, 5, 1, "", "fft"], [144, 5, 1, "", "fft2"], [145, 5, 1, "", "fftn"], [146, 5, 1, "", "ifft"], [147, 5, 1, "", "ifft2"], [148, 5, 1, "", "ifftn"], [149, 5, 1, "", "irfft"], [150, 5, 1, "", "irfft2"], [151, 5, 1, "", "irfftn"], [152, 5, 1, "", "rfft"], [153, 5, 1, "", "rfft2"], [154, 5, 1, "", "rfftn"]], "mlx.core.linalg": [[177, 5, 1, "", "cholesky"], [178, 5, 1, "", "cholesky_inv"], [179, 5, 1, "", "inv"], [180, 5, 1, "", "norm"], [181, 5, 1, "", "qr"], [182, 5, 1, "", "svd"], [183, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[200, 5, 1, "", "clear_cache"], [201, 5, 1, "", "device_info"], [202, 5, 1, "", "get_active_memory"], [203, 5, 1, "", "get_cache_memory"], [204, 5, 1, "", "get_peak_memory"], [205, 5, 1, "", "is_available"], [206, 5, 1, "", "reset_peak_memory"], [207, 5, 1, "", "set_cache_limit"], [208, 5, 1, "", "set_memory_limit"], [209, 5, 1, "", "start_capture"], [210, 5, 1, "", "stop_capture"]], "mlx.core.random": [[229, 5, 1, "", "bernoulli"], [230, 5, 1, "", "categorical"], [231, 5, 1, "", "gumbel"], [232, 5, 1, "", "key"], [233, 5, 1, "", "laplace"], [234, 5, 1, "", "multivariate_normal"], [235, 5, 1, "", "normal"], [236, 5, 1, "", "randint"], [237, 5, 1, "", "seed"], [238, 5, 1, "", "split"], [239, 5, 1, "", "truncated_normal"], [240, 5, 1, "", "uniform"]], "mlx.nn": [[311, 3, 1, "", "ALiBi"], [312, 3, 1, "", "AvgPool1d"], [313, 3, 1, "", "AvgPool2d"], [314, 3, 1, "", "BatchNorm"], [315, 3, 1, "", "Conv1d"], [316, 3, 1, "", "Conv2d"], [317, 3, 1, "", "Conv3d"], [318, 3, 1, "", "Dropout"], [319, 3, 1, "", "Dropout2d"], [320, 3, 1, "", "Dropout3d"], [321, 3, 1, "", "Embedding"], [322, 3, 1, "", "GELU"], [323, 3, 1, "", "GLU"], [324, 3, 1, "", "GRU"], [325, 3, 1, "", "GroupNorm"], [326, 3, 1, "", "HardShrink"], [327, 3, 1, "", "HardTanh"], [328, 3, 1, "", "Hardswish"], [329, 3, 1, "", "InstanceNorm"], [330, 3, 1, "", "LSTM"], [331, 3, 1, "", "LayerNorm"], [332, 3, 1, "", "LeakyReLU"], [333, 3, 1, "", "Linear"], [334, 3, 1, "", "MaxPool1d"], [335, 3, 1, "", "MaxPool2d"], [336, 3, 1, "", "Mish"], [429, 3, 1, "", "Module"], [357, 3, 1, "", "MultiHeadAttention"], [358, 3, 1, "", "PReLU"], [359, 3, 1, "", "QuantizedEmbedding"], [360, 3, 1, "", "QuantizedLinear"], [361, 3, 1, "", "RMSNorm"], [362, 3, 1, "", "RNN"], [363, 3, 1, "", "ReLU"], [364, 3, 1, "", "ReLU6"], [365, 3, 1, "", "RoPE"], [366, 3, 1, "", "SELU"], [367, 3, 1, "", "Sequential"], [368, 3, 1, "", "SiLU"], [369, 3, 1, "", "SinusoidalPositionalEncoding"], [370, 3, 1, "", "Softmax"], [371, 3, 1, "", "Softmin"], [372, 3, 1, "", "Softplus"], [373, 3, 1, "", "Softshrink"], [374, 3, 1, "", "Softsign"], [375, 3, 1, "", "Step"], [376, 3, 1, "", "Tanh"], [377, 3, 1, "", "Transformer"], [378, 3, 1, "", "Upsample"], [387, 3, 1, "", "elu"], [388, 3, 1, "", "gelu"], [389, 3, 1, "", "gelu_approx"], [390, 3, 1, "", "gelu_fast_approx"], [391, 3, 1, "", "glu"], [392, 3, 1, "", "hard_shrink"], [393, 3, 1, "", "hard_tanh"], [394, 3, 1, "", "hardswish"], [395, 3, 1, "", "leaky_relu"], [396, 3, 1, "", "log_sigmoid"], [397, 3, 1, "", "log_softmax"], [412, 3, 1, "", "mish"], [413, 3, 1, "", "prelu"], [293, 5, 1, "", "quantize"], [414, 3, 1, "", "relu"], [415, 3, 1, "", "relu6"], [416, 3, 1, "", "selu"], [417, 3, 1, "", "sigmoid"], [418, 3, 1, "", "silu"], [419, 3, 1, "", "softmax"], [420, 3, 1, "", "softmin"], [421, 3, 1, "", "softplus"], [422, 3, 1, "", "softshrink"], [423, 3, 1, "", "step"], [424, 3, 1, "", "tanh"], [294, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[337, 4, 1, "", "apply"], [338, 4, 1, "", "apply_to_modules"], [339, 4, 1, "", "children"], [340, 4, 1, "", "eval"], [341, 4, 1, "", "filter_and_map"], [342, 4, 1, "", "freeze"], [343, 4, 1, "", "leaf_modules"], [344, 4, 1, "", "load_weights"], [345, 4, 1, "", "modules"], [346, 4, 1, "", "named_modules"], [347, 4, 1, "", "parameters"], [348, 4, 1, "", "save_weights"], [349, 4, 1, "", "set_dtype"], [350, 6, 1, "", "state"], [351, 4, 1, "", "train"], [352, 4, 1, "", "trainable_parameters"], [353, 6, 1, "", "training"], [354, 4, 1, "", "unfreeze"], [355, 4, 1, "", "update"], [356, 4, 1, "", "update_modules"]], "mlx.nn.init": [[379, 5, 1, "", "constant"], [380, 5, 1, "", "glorot_normal"], [381, 5, 1, "", "glorot_uniform"], [382, 5, 1, "", "he_normal"], [383, 5, 1, "", "he_uniform"], [384, 5, 1, "", "identity"], [385, 5, 1, "", "normal"], [386, 5, 1, "", "uniform"]], "mlx.nn.losses": [[398, 3, 1, "", "binary_cross_entropy"], [399, 3, 1, "", "cosine_similarity_loss"], [400, 3, 1, "", "cross_entropy"], [401, 3, 1, "", "gaussian_nll_loss"], [402, 3, 1, "", "hinge_loss"], [403, 3, 1, "", "huber_loss"], [404, 3, 1, "", "kl_div_loss"], [405, 3, 1, "", "l1_loss"], [406, 3, 1, "", "log_cosh_loss"], [407, 3, 1, "", "margin_ranking_loss"], [408, 3, 1, "", "mse_loss"], [409, 3, 1, "", "nll_loss"], [410, 3, 1, "", "smooth_l1_loss"], [411, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[432, 3, 1, "", "AdaDelta"], [433, 3, 1, "", "Adafactor"], [434, 3, 1, "", "Adagrad"], [435, 3, 1, "", "Adam"], [436, 3, 1, "", "AdamW"], [437, 3, 1, "", "Adamax"], [438, 3, 1, "", "Lion"], [451, 3, 1, "", "Optimizer"], [443, 3, 1, "", "RMSprop"], [444, 3, 1, "", "SGD"], [295, 5, 1, "", "clip_grad_norm"], [445, 5, 1, "", "cosine_decay"], [446, 5, 1, "", "exponential_decay"], [447, 5, 1, "", "join_schedules"], [448, 5, 1, "", "linear_schedule"], [449, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[439, 4, 1, "", "apply_gradients"], [440, 4, 1, "", "init"], [441, 6, 1, "", "state"], [442, 4, 1, "", "update"]], "mlx.utils": [[296, 5, 1, "", "tree_flatten"], [297, 5, 1, "", "tree_map"], [298, 5, 1, "", "tree_map_with_path"], [299, 5, 1, "", "tree_reduce"], [300, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 4, 5, 6, 47, 51, 62, 93, 110, 112, 137, 144, 145, 147, 148, 150, 151, 153, 154, 161, 178, 180, 182, 185, 198, 221, 226, 230, 246, 249, 250, 266, 268, 285, 286, 287, 289, 294, 310, 313, 324, 330, 335, 341, 342, 344, 348, 349, 350, 354, 362, 431, 440, 441, 453, 456, 458, 460, 461, 462, 463, 464], "0": [0, 1, 2, 4, 5, 6, 8, 9, 14, 18, 38, 45, 46, 49, 66, 71, 79, 82, 94, 97, 98, 99, 100, 113, 114, 136, 142, 155, 159, 161, 179, 180, 181, 183, 200, 207, 215, 222, 229, 233, 235, 240, 243, 246, 261, 265, 266, 280, 282, 283, 284, 285, 286, 289, 295, 296, 298, 299, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 325, 326, 329, 331, 332, 334, 335, 358, 363, 365, 369, 373, 375, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 394, 395, 398, 400, 402, 403, 407, 410, 411, 413, 414, 415, 416, 422, 423, 426, 429, 432, 433, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 453, 456, 457, 458, 459, 460, 461, 462, 463], "00005": 4, "0001": 369, "0005": 389, "001": 433, "00364": 4, "01": [4, 332, 395, 436], "0137595": 382, "015": 390, "0184009": 383, "02264": 381, "025": 458, "02765": 382, "0300242": 383, "044715": [322, 389], "0485873": 400, "05": [16, 167, 314, 325, 329, 331, 361], "0507": 416, "05202": 5, "06": [401, 411, 432], "0638": 407, "06450": 331, "0645099": 385, "06561": 446, "06675": 438, "07467": 361, "08": [16, 167, 399, 434, 435, 436, 437, 443], "08022": 329, "081": 449, "08415": 390, "08494": 325, "08619": 383, "08681": [336, 412], "09864": 5, "0999938": 447, "0999961": 445, "0f": 0, "1": [0, 1, 2, 3, 5, 6, 11, 14, 18, 28, 29, 38, 46, 49, 97, 98, 99, 100, 113, 114, 135, 139, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 164, 166, 172, 178, 180, 181, 195, 199, 208, 221, 223, 226, 230, 233, 234, 235, 240, 255, 260, 273, 279, 280, 285, 295, 298, 299, 303, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 329, 330, 331, 333, 334, 335, 358, 361, 362, 365, 369, 375, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 416, 417, 419, 420, 421, 423, 426, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 456, 457, 458, 459, 461, 462, 463, 464], "10": [0, 3, 5, 6, 187, 246, 251, 297, 310, 344, 426, 447, 449, 456, 457, 459], "100": [2, 4, 5, 398, 448, 456, 458, 460, 464], "1000": [445, 456], "10000": 365, "101": 448, "1024": [1, 5], "105361": 398, "109": 2, "10_000": 4, "10x": 438, "11": 180, "114": 2, "12": [5, 164, 447], "1212": 432, "12451": 381, "128": [251, 310], "13": 8, "14": 8, "15": [1, 8, 180, 299, 456], "150594": 380, "15268": 382, "16": [1, 139, 303, 312, 329, 334, 337, 429], "1606": 390, "1607": [329, 331], "16384": 164, "16506": 383, "17": 8, "177208": 382, "1803": 325, "1908": [336, 412], "1910": 361, "191107": 380, "1985": 180, "1_000": 4, "1d": [0, 97, 101, 249, 274], "1e": [0, 4, 6, 16, 167, 314, 325, 329, 331, 332, 361, 399, 401, 411, 431, 432, 433, 434, 435, 436, 437, 440, 443, 445, 446, 447, 448, 449], "1e3": 456, "1st": 226, "2": [0, 1, 2, 4, 5, 6, 38, 98, 113, 114, 130, 144, 147, 149, 150, 151, 152, 153, 154, 155, 164, 172, 177, 178, 179, 180, 181, 182, 183, 189, 195, 226, 234, 238, 277, 280, 282, 283, 284, 295, 299, 303, 310, 312, 313, 316, 322, 332, 334, 335, 361, 369, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 400, 401, 403, 410, 411, 426, 429, 431, 432, 434, 435, 436, 440, 443, 456, 457, 458, 459, 460, 461, 462, 463, 464], "20": [164, 180], "200": [5, 447], "2002": 5, "2011": 434, "2012": [432, 443], "2015": [319, 435, 437], "2019": [5, 436], "2020": 5, "2021": 5, "20397": 398, "20_000": 5, "21": [5, 449], "2104": 5, "223144": 398, "223404": 381, "225": 180, "225763": 407, "2302": 438, "23607": [180, 181], "24": 8, "24264": 180, "247": 5, "25": [358, 378], "25211": 382, "256": [1, 2, 6, 139], "256995": 407, "28": 164, "2d": [0, 98, 114, 226, 314, 319], "2nd": 226, "2x": 461, "3": [0, 1, 2, 5, 8, 99, 155, 172, 180, 181, 295, 299, 317, 322, 378, 381, 383, 389, 394, 433, 438, 453, 456, 459, 461, 462], "30": 433, "3118": 461, "32": [1, 5, 6, 89, 226, 227, 303, 313, 335, 361, 456], "330": 5, "33333": 378, "348587": 400, "363207": 380, "36788": 456, "379159": 381, "380709": 385, "39": 5, "390": 458, "3d": [0, 2, 99, 314, 320, 378], "3f": [2, 6, 456], "3x": 2, "4": [0, 1, 2, 5, 112, 137, 139, 155, 160, 180, 226, 227, 251, 293, 299, 303, 312, 313, 314, 329, 334, 335, 359, 360, 377, 378, 380, 381, 382, 398, 456, 457, 459, 462, 464], "4096": [456, 458, 464], "40x": 1, "41421": 180, "417497": 386, "42": 300, "437": 5, "44": 5, "447214": 181, "458835": 382, "475": 5, "48095": 380, "4d": [1, 378], "4m": 1, "5": [0, 1, 2, 4, 5, 8, 180, 208, 229, 299, 312, 314, 318, 319, 320, 322, 326, 329, 334, 373, 378, 379, 382, 383, 389, 392, 410, 422, 426, 431, 443, 445, 446, 456, 458, 459], "50": [0, 184], "500": [5, 464], "5000": 2, "510826": 398, "512": [2, 3, 5, 377, 464], "534422": 385, "539245": 398, "53947": 380, "55": 1, "5701": 432, "573409": 407, "57771": 181, "579": 5, "5f": 4, "6": [1, 2, 5, 180, 251, 364, 377, 381, 389, 390, 394, 401, 411, 415, 443, 456, 459, 462], "61278": 380, "617261": 386, "628": 5, "633": 5, "64": [0, 1, 89, 112, 137, 160, 226, 227, 293, 303, 359, 360], "64331": 383, "666329": 383, "66667": 378, "67326": 416, "676": 1, "690": 5, "6967": 382, "7": [2, 5, 180, 226, 459], "702": [322, 390], "71828": 456, "74166": 180, "74597": 180, "75": 378, "75596": 407, "75787": 382, "765166": 407, "773433": 407, "776856": 381, "793615": 383, "79854": 383, "7b": 5, "7m": 1, "8": [0, 1, 2, 5, 8, 180, 226, 303, 313, 329, 335, 377, 399, 432, 433, 434, 435, 436, 437, 443, 456, 459, 462, 464], "8192": [5, 164], "84804": 180, "863726": 386, "883935": 386, "890597": 381, "894427": 181, "89613": 380, "8gb": 5, "8x": 1, "9": [180, 400, 432, 435, 436, 437, 438, 440, 446, 449, 461], "90041": 381, "912766": 381, "916291": 398, "95": 6, "982273": 385, "99": [438, 443], "995016": 380, "999": [435, 436, 437], "A": [0, 2, 5, 7, 8, 9, 68, 81, 93, 138, 139, 140, 142, 161, 172, 173, 178, 180, 181, 182, 185, 194, 195, 196, 201, 211, 226, 229, 230, 231, 233, 234, 235, 236, 239, 240, 261, 265, 268, 285, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 310, 314, 319, 324, 325, 329, 331, 341, 345, 346, 349, 355, 356, 361, 367, 369, 377, 380, 381, 383, 390, 411, 412, 429, 431, 435, 437, 439, 440, 442, 447, 456, 457, 458, 460, 461], "AS": 159, "And": [5, 378], "As": [6, 38, 273, 310, 456], "At": 92, "But": 464, "By": [5, 293, 349, 398, 458, 461], "For": [0, 1, 2, 5, 8, 38, 142, 159, 172, 180, 226, 300, 310, 314, 319, 322, 337, 342, 351, 354, 360, 365, 369, 378, 380, 381, 382, 383, 398, 426, 431, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464], "If": [0, 1, 2, 5, 8, 15, 16, 17, 18, 26, 27, 28, 29, 77, 81, 82, 92, 94, 101, 104, 105, 106, 107, 113, 114, 117, 118, 119, 121, 122, 123, 132, 138, 141, 152, 153, 154, 157, 158, 161, 167, 177, 178, 180, 185, 194, 195, 196, 198, 199, 207, 208, 211, 215, 219, 222, 223, 225, 230, 234, 243, 259, 260, 261, 266, 270, 272, 273, 274, 277, 279, 280, 285, 286, 289, 291, 293, 297, 299, 314, 315, 316, 317, 325, 331, 333, 342, 344, 354, 360, 362, 365, 367, 369, 378, 398, 400, 411, 433, 456, 457, 458, 460, 463, 464, 465], "In": [0, 1, 2, 5, 6, 38, 195, 226, 297, 310, 319, 325, 429, 432, 434, 435, 437, 438, 439, 455, 456, 457, 458, 460, 463, 464], "It": [2, 5, 8, 122, 161, 254, 285, 295, 299, 310, 356, 360, 439, 451, 461, 463], "Its": 310, "No": [2, 5], "Not": [93, 218, 456], "ON": [3, 8], "Of": 458, "On": [1, 456, 458, 460], "One": [143, 146, 152, 222, 247, 456, 458], "THE": 8, "That": 5, "The": [0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 47, 51, 61, 62, 68, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 207, 208, 209, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 329, 330, 331, 333, 334, 335, 337, 338, 342, 344, 348, 349, 350, 351, 354, 355, 356, 357, 359, 360, 361, 362, 365, 367, 369, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 423, 426, 429, 431, 432, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 448, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "Then": [4, 8], "There": [1, 2, 310, 378, 456], "These": [1, 2, 93, 274, 400, 464], "To": [0, 2, 3, 4, 5, 6, 8, 207, 310, 426, 431, 456, 457, 458, 462], "With": 2, "_": [1, 3, 4, 5, 298, 310, 445, 446, 447, 448, 449, 453, 456, 460, 464], "__call__": [1, 5, 6, 310, 429], "__init__": [2, 5, 6, 9, 10, 11, 30, 108, 116, 139, 301, 310, 429], "__main__": [2, 5], "__name__": [2, 5], "_a": 2, "_ext": 2, "_f": 180, "_in": [380, 381], "_out": [380, 381], "_p": 411, "_size": [312, 313, 334, 335], "_val": 393, "a1": 159, "a2": 159, "a_": 180, "a_max": [0, 92], "a_min": [0, 92], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 461, "ab": [0, 16, 167, 180, 285, 325, 329, 331, 336, 361, 390, 412, 456], "abil": 457, "abl": [2, 226], "about": [1, 2, 5, 6, 127, 201, 460, 464], "abov": [1, 2, 5, 226, 283, 310, 378, 436, 457, 458, 459, 460, 464], "absolut": [0, 12, 16, 167, 389, 390, 410], "acc": 299, "acceler": [2, 314], "access": [0, 5, 50, 310, 429, 440, 457, 460, 464], "accord": [0, 231, 290, 293, 357, 380, 381, 382, 383], "accordingli": 2, "accross": 8, "accumul": [299, 361], "accuraci": 6, "accustom": 5, "achiev": [310, 457], "across": [1, 2, 325, 457], "act": [2, 406], "action": 310, "activ": [2, 8, 202, 319, 375, 377, 392, 412, 422, 423, 425, 456], "actual": [5, 18, 344, 429, 460], "ad": [0, 1, 2, 4, 8, 138, 329, 429, 432, 433, 434, 435, 436, 437, 443, 457, 460, 463], "adadelta": 431, "adafactor": 431, "adagrad": 431, "adam": [431, 437, 438, 447, 448], "adamax": 431, "adamw": [431, 438], "adapt": [432, 433, 434, 457], "add": [0, 1, 2, 3, 5, 14, 38, 134, 190, 222, 226, 315, 316, 317, 458, 464], "add_argu": 5, "add_depend": 2, "add_librari": 2, "addit": [0, 2, 5, 8, 13, 14, 138, 140, 142, 185, 314, 325, 331, 357, 361, 429, 458], "addmm": 0, "address": 2, "adjac": 319, "advanc": [5, 456], "advantag": 464, "advis": 461, "affin": [314, 325, 329, 331, 333, 360], "after": [2, 5, 6, 28, 155, 157, 160, 200, 223, 226, 314, 325, 331, 337, 338, 342, 344, 351, 354, 355, 356, 357, 377, 410, 456, 464], "after_1": 222, "after_2": 222, "after_i": 222, "after_n": 222, "afternoon": 5, "again": [5, 8, 310, 456], "against": 0, "aggreg": 357, "ago": 5, "ai": 108, "ainv": [179, 183], "albeit": 464, "algebra": 7, "algorithm": [378, 438], "alia": [95, 96, 322], "alibi": 310, "align": [178, 226, 313, 324, 330, 335], "align_corn": 378, "all": [0, 1, 2, 3, 6, 8, 16, 28, 38, 83, 84, 85, 93, 98, 99, 100, 108, 117, 118, 119, 136, 145, 148, 151, 154, 159, 160, 182, 195, 222, 223, 264, 293, 310, 337, 338, 342, 345, 346, 347, 352, 354, 357, 369, 377, 378, 426, 429, 451, 453, 456, 459, 460, 462, 465], "all_avg": 457, "all_reduce_grad": 457, "all_sum": 457, "allclos": [0, 1, 139], "alloc": [2, 203, 207, 208, 429], "allow": [0, 1, 2, 172, 295, 310, 356, 429, 451, 457, 459, 462], "almost": 5, "alon": [2, 461], "along": [0, 2, 26, 27, 93, 94, 104, 105, 106, 107, 117, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 164, 180, 243, 259, 261, 265, 273, 274, 277, 278, 279, 280, 287, 310, 323, 362, 391], "alpha": [0, 2, 14, 226, 387, 411, 413, 416, 436, 443], "alpha_": 2, "alreadi": [2, 3, 5, 457], "also": [0, 1, 2, 5, 6, 7, 8, 11, 13, 86, 87, 88, 115, 124, 125, 129, 145, 148, 151, 154, 162, 163, 174, 175, 176, 190, 197, 212, 214, 218, 224, 226, 242, 245, 269, 293, 294, 305, 310, 341, 355, 357, 359, 360, 368, 388, 416, 418, 425, 431, 456, 457, 458, 459, 460, 461, 462, 465], "altern": 453, "alwai": [1, 82, 202, 296, 458], "am": 5, "among": 2, "amount": [5, 204, 312, 334], "amus": 5, "an": [0, 1, 2, 3, 5, 6, 8, 10, 15, 17, 30, 83, 84, 85, 90, 97, 98, 99, 100, 116, 121, 122, 123, 132, 136, 138, 142, 155, 158, 165, 177, 180, 185, 208, 213, 219, 220, 222, 225, 226, 227, 243, 244, 246, 261, 264, 271, 273, 274, 277, 278, 282, 289, 291, 292, 296, 297, 298, 299, 310, 312, 313, 318, 322, 325, 330, 331, 333, 334, 335, 337, 357, 358, 360, 362, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 413, 426, 431, 432, 442, 446, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "anaconda": 457, "anchor": 411, "angl": [111, 228, 332], "angular": [141, 365], "ani": [0, 1, 2, 5, 7, 18, 93, 296, 297, 298, 299, 300, 310, 322, 337, 338, 341, 350, 360, 377, 378, 426, 448, 455, 456, 458, 460, 462, 463, 464], "anonym": 456, "anoth": [0, 92, 172, 195, 269, 290, 303, 310, 337, 456, 458, 459, 464], "anwywher": 8, "anyhow": 5, "anymor": 5, "anyth": [5, 285, 460], "anytim": 460, "api": [1, 2, 322, 457, 458], "app": 8, "append": [5, 195, 456, 460], "appl": [2, 5, 7, 8, 464], "appli": [0, 38, 141, 142, 159, 182, 297, 298, 299, 310, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 351, 358, 360, 361, 362, 363, 364, 366, 368, 370, 371, 372, 373, 374, 375, 376, 378, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 439, 442, 448, 451, 456, 457], "applic": [3, 8], "apply_fn": 338, "apply_gradi": 431, "apply_to_modul": [310, 342], "approach": [406, 458], "appropri": [2, 456], "approx": 322, "approxim": [16, 322, 388, 389, 390], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 16, 18, 81, 89, 90, 92, 93, 100, 101, 108, 114, 121, 122, 132, 136, 139, 144, 145, 147, 148, 150, 151, 153, 154, 155, 160, 161, 167, 168, 169, 170, 171, 172, 173, 180, 181, 185, 195, 208, 221, 222, 223, 226, 227, 229, 230, 231, 236, 239, 240, 251, 252, 264, 265, 273, 285, 288, 289, 293, 296, 297, 303, 314, 315, 316, 317, 318, 319, 320, 325, 329, 331, 333, 344, 357, 360, 378, 398, 400, 401, 425, 429, 431, 438, 440, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "arang": [0, 1, 180, 303, 378, 459, 461], "arbitrari": [296, 429], "arbitrarili": [1, 93, 310, 455, 458, 462], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [5, 8, 201, 310, 356, 464], "archiv": 463, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 5, 10, 11, 116, 132, 251, 252], "arg1": 172, "arg2": 172, "argmax": [0, 6], "argmin": 0, "argnam": [161, 285], "argnum": [2, 161, 285, 458], "argpars": 5, "argpartit": 0, "argsort": 0, "argument": [1, 31, 65, 78, 93, 132, 161, 285, 297, 298, 299, 310, 378, 453, 457, 458, 463, 464, 465], "argumentpars": 5, "ari": [83, 84, 85], "aris": 461, "arm": 8, "arm64": 8, "around": 5, "arr": [0, 248, 459], "arr_0": 463, "arrai": [0, 1, 2, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 310, 314, 330, 337, 344, 347, 352, 358, 378, 379, 380, 381, 382, 383, 384, 385, 386, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 423, 426, 429, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449, 456, 457, 458, 460, 461, 462, 464], "array_equ": [0, 16, 167], "arrayfir": 7, "arxiv": [5, 325, 329, 331, 336, 361, 390, 412, 432, 438], "as_strid": 0, "ask": [5, 457], "assert": [1, 2, 139], "assign": [0, 2, 38, 429], "associ": [2, 251, 252, 460], "assum": [0, 2, 5, 89, 181, 297, 310, 312, 313, 325, 334, 335], "astyp": [0, 1, 2, 5, 139, 337, 461], "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 16, 167], "atom": [1, 139], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 139], "attach": 2, "attempt": 93, "attend": 357, "attent": [142, 342, 357, 369, 377], "attention_norm": 5, "attribut": [1, 9, 10, 11, 30, 301, 350, 429, 451], "audio": 378, "auto": [0, 2, 8], "autom": 458, "automat": [1, 2, 7, 185, 457, 462, 463, 464], "autoregress": 5, "avail": [2, 4, 5, 6, 8, 10, 120, 205, 305, 464], "averag": [312, 313, 432, 433, 435, 436, 437, 457], "avgpool1d": 310, "avgpool2d": 310, "avoid": [1, 2, 349, 456], "awai": [2, 5], "awar": [456, 460], "ax": [0, 2, 15, 17, 26, 27, 78, 108, 134, 144, 145, 147, 148, 150, 151, 153, 154, 155, 166, 180, 194, 196, 198, 211, 222, 225, 259, 264, 266, 270, 271, 277, 281, 286, 458], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 5, 6, 15, 17, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 71, 74, 75, 79, 94, 104, 105, 106, 107, 114, 117, 134, 138, 140, 143, 146, 149, 150, 151, 152, 153, 154, 155, 164, 180, 194, 196, 198, 211, 213, 222, 223, 225, 230, 243, 259, 260, 261, 264, 265, 266, 270, 271, 273, 274, 278, 279, 280, 281, 286, 287, 289, 312, 313, 323, 334, 335, 362, 391, 397, 399, 400, 404, 409, 411, 419, 420, 459], "axis1": [0, 46, 76, 114, 271, 280], "axis2": [0, 46, 76, 114, 271, 280], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_": 2, "axpby_impl": 2, "axpby_impl_acceler": 2, "b": [0, 1, 2, 3, 5, 13, 14, 16, 24, 81, 86, 87, 88, 89, 124, 125, 129, 139, 157, 159, 162, 163, 166, 167, 174, 175, 176, 180, 190, 191, 193, 195, 197, 212, 214, 218, 221, 224, 226, 233, 242, 245, 269, 277, 285, 298, 299, 323, 333, 362, 378, 391, 458, 459, 460, 461, 462, 463, 464], "b1": 159, "b2": 159, "b_": [324, 330], "b_stride": 1, "ba": [435, 437], "back": [5, 108, 205, 461], "backend": [1, 8, 119, 120], "backward": [1, 456, 458], "bad": 460, "balanc": 406, "baltimor": 180, "bandwidth": [456, 457], "bar": 457, "base": [0, 2, 141, 180, 187, 189, 224, 365, 377, 429, 431, 437, 451, 453, 456, 459], "base_idx": 1, "basi": 451, "basic": [4, 246, 458], "batch": [5, 14, 89, 159, 160, 195, 234, 314, 315, 316, 317, 319, 320, 324, 330, 357, 362, 378, 460], "batch_idx": 1, "batch_iter": [6, 431], "batch_siz": [6, 431], "batchnorm": 310, "becaus": [5, 202, 310, 460], "been": [0, 2, 5, 203, 460], "befor": [1, 2, 5, 8, 28, 139, 223, 341, 377, 440, 457, 459, 460], "before_1": 222, "before_2": 222, "before_i": 222, "before_n": 222, "beforehand": 221, "begin": [82, 178, 204, 226, 313, 324, 330, 335, 375, 392, 403, 410, 416, 422, 423], "behav": 108, "behavior": [234, 406, 459, 460], "behaviour": [108, 177, 178], "behind": 458, "being": [267, 310], "bell": 2, "below": [2, 8, 180, 282, 284, 303, 378, 460], "bench": 2, "benchmark": [2, 456], "benefici": [319, 320, 460], "best": 457, "beta": [0, 2, 14, 112, 137, 226, 314, 325, 329, 331, 410, 431, 435, 436, 437, 438], "beta_": 2, "beta_1": [433, 435, 436, 437, 438], "beta_2": [435, 436, 437, 438], "better": [458, 464], "between": [0, 2, 7, 92, 155, 377, 399, 402, 403, 406, 447, 457, 460, 461, 464], "beyond": [445, 448], "bfloat16": [2, 11, 164, 303, 461], "bfloat16_t": 2, "bia": [5, 112, 137, 138, 160, 226, 227, 297, 310, 315, 316, 317, 324, 330, 331, 333, 342, 344, 354, 357, 360, 362, 435, 436, 437, 440, 458], "bias": [0, 112, 137, 160, 226, 227, 324, 330, 342, 354, 357], "bicub": 378, "big": [1, 456], "bigger": [5, 433], "bilinear": [1, 378], "binari": [185, 248, 249, 250, 251, 252, 287, 375, 398, 423, 456], "binary_cross_entropi": [310, 456], "bit": [0, 112, 137, 160, 174, 226, 227, 245, 293, 303, 337, 359, 360, 361], "bitwis": [0, 86, 87, 88, 174, 245], "bitwise_and": 0, "bitwise_or": 0, "bitwise_xor": 0, "block": [0, 2, 5, 89, 377], "block_masked_mm": 0, "block_siz": [0, 89], "bn": 314, "bodi": [1, 139], "bool": [0, 1, 2, 15, 16, 17, 26, 27, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 75, 77, 79, 81, 93, 100, 104, 105, 106, 107, 119, 120, 139, 141, 160, 167, 172, 177, 178, 180, 183, 185, 194, 196, 198, 199, 205, 208, 211, 225, 227, 266, 270, 286, 314, 315, 316, 317, 324, 325, 329, 330, 331, 333, 337, 341, 342, 344, 349, 351, 354, 357, 360, 362, 365, 369, 377, 378, 398, 401, 433, 444], "bool_": [11, 303], "boolean": [0, 16, 81, 167, 168, 169, 170, 171, 172, 191, 192, 193, 303, 353, 459], "both": [1, 2, 13, 86, 87, 88, 124, 125, 129, 162, 163, 172, 174, 175, 176, 180, 190, 197, 212, 214, 218, 224, 230, 242, 245, 269, 293, 312, 313, 329, 330, 334, 335, 431, 456, 457, 458, 462, 464], "bottom": 378, "bound": [0, 236, 239, 240, 322, 386, 456, 459, 464], "boundari": [11, 447], "bracket": 5, "brain": 303, "break": 461, "bregler": 319, "broadcast": [0, 2, 13, 16, 86, 87, 88, 90, 92, 124, 125, 129, 158, 162, 163, 167, 174, 175, 176, 190, 195, 197, 212, 214, 218, 224, 229, 230, 234, 239, 240, 242, 245, 269, 274, 290, 357], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 7, "btl_tcp_link": 457, "buffer": [1, 2, 202, 461], "bui": 5, "build": [3, 5, 7, 382, 429, 456], "build_ext": [2, 8], "build_shared_lib": [2, 8], "built": [1, 2, 8, 460], "bundl": 5, "byte": [51, 61, 202, 203, 204, 207, 208, 303], "c": [0, 1, 2, 5, 14, 180, 312, 313, 314, 315, 316, 317, 319, 320, 329, 330, 334, 335, 461, 462, 464], "c_": [330, 438], "c_in": [97, 98, 99, 100], "c_j": [312, 313, 334, 335], "c_out": [97, 98, 99, 100], "c_pad": 1, "c_t": [330, 438], "cach": [5, 8, 200, 202, 203, 207, 456], "cahc": 8, "calcul": [180, 398, 401, 407, 433], "call": [2, 3, 5, 6, 31, 122, 139, 157, 200, 204, 310, 321, 342, 354, 359, 367, 429, 431, 440, 456, 457, 458, 460], "callabl": [93, 108, 139, 161, 173, 285, 288, 289, 293, 294, 296, 297, 298, 299, 337, 338, 341, 349, 362, 367, 377, 379, 380, 381, 382, 383, 384, 385, 386, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 447, 448, 449], "can": [1, 2, 3, 5, 7, 8, 13, 18, 65, 78, 82, 86, 87, 88, 93, 114, 115, 116, 124, 125, 129, 132, 162, 163, 174, 175, 176, 180, 190, 197, 212, 214, 218, 224, 229, 230, 236, 239, 240, 242, 245, 249, 269, 280, 285, 299, 310, 313, 321, 322, 335, 341, 354, 359, 367, 378, 400, 426, 429, 431, 439, 440, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "cannot": [5, 92, 459, 461], "captur": [2, 3, 93, 209, 210, 310, 456], "care": [5, 460], "carri": 2, "cartesian": 199, "case": [2, 5, 117, 118, 119, 121, 122, 123, 145, 148, 149, 151, 152, 153, 154, 155, 177, 178, 179, 181, 182, 183, 195, 244, 264, 313, 319, 335, 375, 392, 410, 416, 422, 423, 439, 440, 456, 458, 462, 463, 464, 465], "cast": [2, 37, 152, 153, 154, 185, 337, 349, 461], "caster": 2, "categor": 5, "categori": [11, 172, 303], "catlas_saxpbi": 2, "caus": [310, 456, 460], "causal": 5, "caution": 82, "cd": [3, 8], "cdf": [231, 322, 388], "cdot": [390, 399, 402, 418], "ceil": 0, "ceildiv": 1, "cell": 330, "certain": [2, 351, 456], "chang": [82, 93, 254, 287, 355, 360, 378, 403, 410, 456, 461], "channel": [1, 97, 98, 99, 100, 314, 315, 316, 317, 319, 320], "channel_idx": 1, "charact": 296, "check": [0, 2, 8, 81, 120, 172, 205, 344, 458, 459], "checklist": 457, "checkout": [3, 456], "checkpoint": [377, 431], "chekpoint": 377, "chen": 438, "child": 356, "children": 310, "chip": 8, "choleski": 178, "choos": [5, 141, 365], "chosen": 127, "clamp": 155, "clang": 8, "clariti": 458, "class": [2, 5, 6, 9, 10, 11, 30, 108, 116, 139, 301, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 432, 433, 434, 435, 436, 437, 438, 443, 444, 451], "class_pred": 293, "classif": [382, 383], "classifi": 6, "classmethod": [359, 360], "clear": 200, "click": 8, "clip": [0, 295, 398, 433], "clip_threshold": 433, "clipped_grad": 295, "clone": 8, "close": [4, 7, 8, 16, 167], "closer": 297, "cmake": [3, 8], "cmake_arg": 3, "cmake_build_parallel_level": 8, "cmake_build_typ": 8, "cmake_current_list_dir": 2, "cmake_host_system_processor": 8, "cmake_library_output_directori": 2, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": 2, "cmdclass": 2, "co": [0, 2, 108, 369, 458], "code": [1, 139, 456, 457, 460], "coeffici": [2, 432, 433, 435, 436, 437, 438], "col": 282, "col_contigu": 2, "cold": 8, "collect": [2, 297, 298, 455], "column": [2, 136, 165, 226], "com": [8, 457], "combin": [5, 182, 299], "come": [2, 5, 457, 458], "command": [2, 3, 8, 457], "command_buff": 2, "common": [2, 431, 456, 460], "commonli": [6, 355, 426, 456], "commun": [7, 116, 119, 120], "compar": [2, 81, 456], "comparison": [16, 129, 162, 163, 175, 176, 218], "compat": [5, 230, 234, 322, 463], "compil": [0, 3, 7, 8, 115, 128, 139, 457, 458, 460], "compiled_fun": 456, "compiled_grad_fn": 456, "complet": [4, 5, 8, 208, 355, 356, 458, 464], "complex": [2, 95, 96, 150, 151, 152, 153, 154, 296, 303, 310, 356, 456, 458], "complex64": [2, 11, 303], "complex64_t": 2, "complexflo": 11, "compon": [2, 5], "compos": [7, 310, 456, 458, 462], "composit": 462, "compress": 252, "compromis": 5, "comput": [0, 1, 2, 4, 5, 6, 7, 8, 104, 105, 106, 107, 108, 112, 127, 135, 137, 141, 161, 173, 177, 178, 179, 180, 183, 190, 198, 221, 226, 242, 259, 266, 267, 277, 285, 286, 288, 294, 310, 314, 324, 325, 329, 330, 331, 342, 355, 360, 361, 365, 377, 380, 381, 382, 383, 389, 390, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 431, 432, 433, 435, 436, 437, 438, 442, 456, 457, 458, 462, 464], "computation": 460, "compute_encod": 2, "concaten": [0, 5, 117], "concept": 429, "concis": 5, "concret": [2, 324, 330, 333, 362, 460, 464], "conda": [8, 457], "condit": [0, 2, 290, 464], "config": [2, 457], "configu": 431, "configur": [112, 137, 457], "confirm": 457, "confus": 6, "conj": 96, "conjug": [0, 95], "connect": 457, "consecut": [141, 226, 365], "consequ": 5, "consid": [5, 16, 81, 167, 296, 297, 298, 325, 455], "consider": 456, "const": [0, 1, 2, 401], "constant": [0, 2, 5, 8, 138, 140, 222, 310, 314, 325, 331, 361, 401, 411, 443, 445, 456, 461], "constant_valu": 222, "constitut": 297, "construct": [0, 2, 6, 45, 113, 158, 219, 278, 291], "consum": 460, "contain": [2, 5, 8, 28, 29, 68, 93, 114, 127, 149, 150, 151, 159, 160, 180, 191, 192, 193, 226, 261, 290, 295, 310, 341, 343, 344, 350, 377, 407, 426, 429, 456, 457, 458], "content": [8, 341, 456], "context": 268, "contigu": [1, 2, 82, 139], "continu": 458, "contract": [0, 127], "contrast": 436, "contribut": 2, "contriv": [458, 464], "control": [0, 332, 453, 460], "conv": 101, "conv1d": [0, 310], "conv2d": [0, 310], "conv3d": [0, 310], "conv_gener": 0, "conveni": [1, 2, 6, 172], "convent": [18, 101, 126, 127, 378, 436], "convers": 7, "convert": [0, 1, 2, 77, 83, 84, 85, 111, 155, 228, 359, 360, 460, 461, 462], "convolut": [0, 97, 98, 99, 100, 101, 315, 316, 317, 319, 320], "convolv": [97, 98, 99, 100], "coordin": [0, 199], "copi": [0, 1, 2, 5, 7, 223, 260, 461], "copy_inplac": 2, "copytyp": 2, "core": [1, 2, 3, 4, 5, 6, 293, 310, 312, 313, 314, 329, 334, 335, 344, 347, 349, 352, 378, 379, 380, 381, 382, 383, 384, 385, 386, 398, 400, 407, 426, 429, 431, 456, 457, 461, 462], "corner": 378, "correct": [2, 8, 435, 436, 437, 459, 460], "correctli": 38, "correl": [100, 319], "correspond": [0, 2, 15, 17, 77, 92, 112, 114, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 194, 196, 211, 225, 270, 277, 289, 297, 458], "cos_first": 369, "cosh": [0, 406], "cosin": [0, 19, 20, 102, 103, 399, 445, 447, 458], "cosine_decai": [431, 447], "cosine_similarity_loss": 310, "cost": [8, 433, 457, 460], "costli": 460, "cot": 1, "cot_index": 1, "cotan": [2, 108], "cotang": [1, 2, 108, 288], "could": [5, 310], "count": [310, 447], "counter": 453, "cours": 458, "coursera": 443, "cov": 234, "covari": [234, 314], "cover": 2, "cpp": 2, "cpu": [7, 8, 181, 456, 464], "cpython": 2, "crash": [82, 456], "creat": [0, 2, 5, 8, 82, 119, 136, 165, 268, 310, 429, 431, 447, 456, 459, 461], "create_additive_causal_mask": 5, "criteria": 2, "cross": [6, 100, 398, 400], "cross_entropi": [6, 310], "crowd": 5, "cry": 5, "cubic": 378, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 82, 104, 105, 106, 107], "current": [5, 7, 8, 82, 89, 99, 123, 201, 203, 226, 299, 310, 433, 457, 460], "custom": [7, 108, 139, 377], "custom_decod": 377, "custom_encod": 377, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 319, "cycl": 455, "d": [0, 1, 2, 5, 99, 113, 114, 166, 180, 195, 199, 221, 273, 280, 282, 283, 284, 300, 317, 320, 324, 330, 362, 432, 435, 437, 464], "d1": 464, "d2": 464, "d2fdx2": 458, "d_i": 333, "dampen": 444, "darwin": 2, "data": [0, 2, 6, 7, 10, 18, 121, 136, 152, 153, 158, 165, 184, 215, 219, 239, 280, 282, 287, 291, 320, 379, 380, 381, 382, 383, 384, 385, 386, 456, 457, 459, 461], "dataset": [4, 457, 460], "datatyp": 51, "dbuild_shared_lib": 8, "dcmake_build_typ": 8, "ddof": [0, 79, 266, 286], "deal": 456, "debug": [1, 3, 457], "debugg": 7, "decai": [433, 436, 438, 444, 445, 446, 449], "decay_r": [433, 446, 449], "decay_step": 445, "decent": 6, "decid": [297, 341], "decim": [0, 66, 246], "declar": 2, "decltyp": 1, "decod": 377, "decomposit": [177, 178, 182], "decor": [1, 108], "decoupl": 436, "deep": [314, 380, 381, 382, 383], "def": [1, 2, 4, 5, 6, 108, 139, 285, 310, 429, 456, 457, 458, 459, 460, 461, 464], "default": [1, 2, 8, 14, 15, 16, 17, 18, 26, 27, 28, 29, 81, 82, 89, 93, 94, 97, 98, 99, 100, 108, 109, 110, 112, 113, 114, 117, 118, 119, 121, 122, 123, 136, 137, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 164, 165, 167, 177, 178, 179, 180, 181, 182, 183, 184, 185, 194, 196, 198, 199, 207, 208, 211, 215, 219, 222, 223, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 243, 244, 246, 253, 254, 260, 261, 264, 265, 266, 268, 270, 272, 277, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 293, 303, 312, 313, 314, 315, 316, 317, 323, 324, 326, 329, 330, 332, 333, 334, 335, 337, 342, 344, 349, 351, 354, 357, 358, 359, 360, 362, 365, 369, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 429, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 453, 455, 456, 458, 461, 463, 465], "default_devic": 465, "default_stream": 465, "defin": [1, 2, 4, 5, 6, 8, 108, 122, 139, 160, 180, 227, 293, 296, 461], "definit": [108, 177, 178, 234], "degre": [0, 228, 411], "delta": [403, 432], "delv": [382, 383], "demonstr": 461, "denomin": [329, 399, 432, 434, 435, 436, 437, 443], "dens": [199, 464], "depend": [0, 2, 3, 4, 8, 77, 180, 324, 330, 362, 457, 459, 463, 464], "depth": [296, 317, 320, 458], "dequant": [0, 226], "deriv": [2, 458, 460], "descend": 339, "descent": [444, 456, 460], "describ": [2, 460], "descript": [2, 5, 303], "design": [1, 4, 7, 453, 464], "destin": [0, 2, 60, 123, 213], "destroi": 456, "detach": 458, "detail": [1, 2, 10, 207, 310, 319, 365, 369, 378, 380, 381, 382, 383, 432, 434, 435, 437, 438, 459, 462], "determin": [0, 2, 114, 139, 234, 299, 303, 348, 463], "dev": [2, 8], "develop": [2, 8], "developer_dir": 8, "deviat": [0, 235, 266, 380, 382, 385], "deviatoin": 0, "devic": [1, 2, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 290, 291, 292, 301, 464, 465], "devicetyp": 9, "df": 461, "dfdx": [458, 459], "dft": [143, 144, 145, 146, 147, 148, 152, 153, 154], "dhwc": 320, "diag": [0, 182], "diagon": [0, 45, 113, 136, 280, 282, 283, 284], "dict": [93, 132, 185, 201, 249, 250, 251, 295, 347, 352, 355, 356, 429, 431, 439, 440, 442, 455, 458, 463], "dict_kei": [297, 440], "dictionari": [5, 93, 185, 201, 249, 250, 295, 296, 299, 310, 341, 350, 355, 356, 441, 455, 463], "did": 5, "diff": 2, "differ": [7, 172, 269, 287, 410, 458], "differenti": [1, 2, 7], "difficult": 458, "difficulti": [380, 381], "dilat": [0, 97, 98, 99, 100, 315, 316], "dim": [1, 5, 141, 142, 321, 325, 329, 331, 357, 359, 361, 365, 369, 377], "dimens": [0, 2, 5, 15, 17, 26, 27, 62, 68, 77, 83, 84, 85, 93, 98, 99, 100, 114, 134, 141, 150, 151, 153, 154, 155, 159, 160, 166, 177, 178, 179, 180, 181, 182, 183, 194, 195, 196, 198, 211, 225, 226, 230, 238, 266, 270, 274, 277, 281, 286, 314, 315, 316, 317, 319, 320, 323, 324, 325, 329, 330, 331, 357, 361, 362, 365, 377, 378, 391, 400, 456, 458], "dimension": [30, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 312, 313, 314, 315, 316, 317, 321, 333, 334, 335, 359, 360, 369, 459, 461], "direct": [2, 5, 339, 438, 464], "directli": [2, 5, 82], "directori": [2, 5, 8], "disabl": [115, 207, 456], "disable_compil": 456, "disappoint": 5, "discard": [5, 296], "discov": 8, "discoveri": 438, "discret": [101, 143, 144, 145, 146, 147, 148, 152, 153, 154, 321, 359], "discuss": 2, "disk": 5, "dispatch": 2, "dispatchthread": 2, "displai": 310, "distanc": [5, 411], "distribut": [7, 8, 229, 230, 231, 233, 234, 235, 239, 240, 333, 380, 381, 382, 383, 385, 386, 401, 404, 409, 411, 426], "diverg": 404, "divid": [0, 2, 38, 157, 226, 242, 457], "divis": [0, 124, 157, 226, 242], "divisor": [266, 286], "divmod": 0, "dloss_dw": 458, "dloss_dx": 458, "dlpack": 461, "dlvalu": 285, "dmlx_build_cpu": 8, "dmlx_build_gguf": 8, "dmlx_build_safetensor": 8, "dmlx_metal_debug": 3, "dmlx_metal_jit": 8, "do": [0, 2, 5, 8, 287, 310, 343, 354, 426, 429, 436, 456, 457, 458, 460], "doc": [2, 6, 457], "document": [2, 3, 65, 78, 249, 250, 303, 456, 458, 459], "doe": [0, 2, 3, 5, 8, 202, 287, 295, 310, 456, 459, 460, 461], "doesn": [2, 310], "domain": [239, 457], "don": [1, 8, 456, 464], "done": [310, 318, 361, 456, 457, 460, 461], "dot": [177, 179, 183, 277, 296, 346, 357], "doubl": [0, 5], "doubt": 5, "down": [5, 295], "dparam": 285, "draw": 230, "drop": 341, "dropout": [310, 319, 320, 351, 377, 456], "dropout2d": 310, "dropout3d": 310, "dst": 123, "dt": 130, "dtype": [0, 1, 2, 5, 11, 18, 30, 37, 38, 77, 80, 121, 122, 136, 139, 155, 158, 165, 172, 180, 181, 184, 219, 231, 233, 234, 235, 236, 239, 240, 280, 282, 287, 291, 303, 349, 378, 379, 380, 381, 382, 383, 384, 385, 386, 398, 400, 407, 445, 446, 447, 448, 449, 456, 457, 458, 459, 461, 462, 463], "dtypecategori": [172, 303], "dual": 406, "duchi": 434, "dure": [3, 93, 318, 319, 320, 378, 461], "dx": 108, "dy": 108, "dyld": 457, "dyld_library_path": 457, "dylib": 2, "dynam": 460, "e": [2, 6, 8, 108, 130, 139, 159, 160, 173, 255, 314, 315, 316, 317, 319, 320, 325, 329, 331, 342, 361, 396, 397, 419, 420, 425, 431, 434, 456, 460, 465], "e5": 303, "e8": 303, "each": [0, 1, 2, 68, 112, 132, 137, 141, 160, 172, 177, 178, 179, 182, 183, 195, 199, 222, 226, 227, 230, 243, 251, 252, 261, 278, 281, 287, 289, 290, 319, 320, 321, 324, 325, 330, 362, 365, 377, 398, 400, 453, 456, 457, 460], "eager": 460, "earli": 319, "earlier": 2, "eas": 5, "easi": [2, 310, 457], "easier": [1, 460], "edg": [92, 222, 378, 456], "edit": [8, 356], "effect": [319, 456, 460], "effici": [5, 7, 159, 319, 365, 460, 462], "einstein": [126, 127], "einsum": 127, "either": [8, 13, 65, 77, 78, 86, 87, 88, 92, 124, 125, 129, 157, 162, 163, 174, 175, 176, 180, 190, 195, 197, 212, 214, 218, 224, 242, 245, 269, 285, 313, 335, 367, 378, 382, 383, 461], "elem": [1, 139], "elem_to_loc": [1, 2], "element": [0, 1, 2, 12, 13, 19, 20, 21, 22, 23, 24, 25, 28, 70, 82, 86, 87, 88, 91, 102, 103, 104, 105, 106, 107, 112, 124, 125, 129, 130, 131, 133, 135, 136, 137, 156, 157, 160, 162, 163, 167, 168, 169, 170, 171, 174, 175, 176, 186, 187, 188, 189, 190, 191, 192, 193, 197, 199, 212, 214, 216, 218, 223, 224, 226, 227, 241, 242, 243, 245, 247, 255, 256, 257, 258, 262, 263, 269, 273, 275, 276, 279, 285, 287, 290, 318, 319, 320, 324, 328, 330, 336, 358, 362, 365, 393, 394, 396, 397, 412, 413, 415, 418, 419, 420, 421, 456, 458], "elementwis": [1, 95, 96], "elif": 5, "ellipsi": 459, "elman": 362, "els": [0, 2, 5, 310, 342, 457, 460], "elsewher": [282, 459], "elu": [310, 416], "emb": [5, 321, 359, 369], "embed": [5, 293, 310, 359, 365, 369, 399], "empti": [123, 234], "enabl": [3, 5, 8, 93, 128, 444], "encod": [2, 141, 365, 369, 377, 400], "encount": [2, 458], "end": [114, 178, 205, 226, 313, 324, 330, 335, 375, 392, 403, 410, 416, 422, 423, 445, 448], "end_axi": [0, 49, 155], "end_encod": 2, "endif": 2, "endswith": 342, "enhanc": [5, 365, 460], "enjoi": 2, "enough": [2, 460], "ensur": [0, 1, 2, 8, 139, 295, 406, 457], "ensure_row_contigu": [1, 139], "enter": 5, "entir": [15, 17, 26, 27, 194, 196, 198, 211, 225, 266, 270, 286, 319, 320], "entri": [0, 319, 320], "entropi": [6, 398, 400], "enumer": 310, "environ": [8, 115, 128, 457], "ep": [4, 138, 140, 314, 325, 329, 331, 361, 399, 401, 411, 431, 432, 433, 434, 435, 436, 437, 443], "epoch": 6, "epsilon": [314, 325, 329, 331, 361, 399, 401, 432, 434, 435, 436, 437, 443], "epsilon_1": 433, "epsilon_2": 433, "equal": [0, 16, 28, 81, 136, 163, 167, 176, 218, 223, 236, 261, 329, 333], "equal_nan": [0, 16, 81, 167], "equat": [126, 127], "equival": [0, 2, 31, 65, 78, 122, 125, 157, 160, 164, 273, 322, 326, 327, 328, 356, 358, 360, 363, 364, 366, 368, 370, 371, 372, 373, 374, 376], "erf": [0, 131, 456], "erfinv": 0, "error": [0, 2, 8, 119, 130, 131, 208, 261, 322, 388, 389, 390, 406, 408, 458, 461], "error_norm": 4, "estim": [435, 437], "eta": 438, "etc": [2, 226, 310, 378, 457], "eval": [2, 3, 4, 5, 6, 310, 429, 431, 456, 457, 458, 460, 462], "eval_cpu": 2, "eval_fn": 6, "eval_gpu": 2, "evalu": [2, 5, 6, 7, 123, 132, 173, 288, 310, 340, 351, 429, 431, 456, 462], "even": [1, 2, 5, 93, 456, 460, 461], "evenli": [0, 184], "everi": [226, 297, 431, 449, 458], "everyth": [5, 457], "everywher": 0, "exact": [389, 390], "exactli": [2, 5, 141, 344, 458], "exampl": [0, 3, 4, 5, 6, 8, 18, 38, 108, 139, 155, 172, 180, 181, 268, 273, 295, 298, 299, 310, 312, 313, 314, 329, 334, 335, 342, 344, 351, 354, 378, 379, 380, 381, 382, 383, 384, 385, 386, 398, 400, 407, 426, 431, 440, 445, 446, 447, 448, 449, 453, 458, 459, 460, 461, 462, 463], "exce": 295, "exceed": 208, "except": [7, 136, 149, 150, 152, 153, 154, 325, 344, 459, 461], "exclud": 274, "exclus": [0, 82, 88], "execut": [2, 8, 83, 84, 85, 204, 461, 464], "exist": [2, 3, 5, 342, 354], "exp": [0, 1, 135, 139, 190, 194, 231, 259, 387, 404, 416, 417, 421, 456, 464], "exp_elementwis": [1, 139], "expand_dim": 0, "expect": [2, 5, 315, 316, 317, 318, 319, 320, 369, 377, 401, 456, 459], "expens": 377, "expensive_fun": 460, "experiment": 461, "explain": 2, "explicit": [2, 440, 453, 461], "explicitli": [159, 310, 453], "explor": 8, "expm1": 0, "exponenti": [0, 133, 135, 366, 387, 416, 446], "exponential_decai": 431, "export": 8, "ext_modul": 2, "extend": [2, 222], "extens": [7, 185, 209, 348, 463], "extern": 461, "extra": [1, 297, 298], "extract": [0, 5, 45, 113, 114, 310, 341, 429, 457], "extras_requir": 2, "extrem": [459, 460], "ey": [0, 5, 179, 183], "f": [0, 2, 4, 6, 108, 180, 310, 330, 436, 456, 461], "f_jvp": 108, "f_t": 330, "f_vjp": 108, "f_vmap": 108, "face": 5, "factor": [2, 14, 164, 177, 178, 181, 378, 400, 446, 449], "fall": [2, 108], "fallback": 2, "fals": [0, 1, 2, 5, 15, 16, 17, 26, 27, 33, 34, 35, 36, 41, 42, 43, 44, 56, 57, 58, 59, 63, 75, 79, 81, 93, 100, 104, 105, 106, 107, 119, 139, 167, 172, 177, 178, 180, 183, 185, 194, 196, 198, 199, 208, 211, 225, 266, 270, 286, 290, 293, 296, 297, 298, 299, 303, 325, 329, 331, 333, 342, 344, 354, 357, 360, 365, 369, 377, 378, 398, 401, 433, 444, 461], "famili": 5, "fan": [380, 381, 382, 383], "fan_in": [380, 381, 382, 383], "fan_out": [380, 381, 382, 383], "far": 431, "fast": [1, 7, 322, 390, 457, 464], "faster": [1, 2, 8, 125, 388, 398, 456, 458], "featur": [1, 7, 97, 98, 99, 100, 141, 314, 324, 325, 329, 330, 331, 333, 360, 361, 362, 365, 377, 378, 456, 460], "feed": 5, "feed_forward": 5, "feedforward": [380, 381], "feel": 5, "fetch": 1, "few": [1, 2, 5, 6, 7, 8, 457, 460, 462], "ffn": 5, "ffn_norm": 5, "fft": 7, "figur": 457, "file": [5, 8, 185, 248, 249, 250, 251, 252, 344, 348, 457, 458, 463], "file_or_weight": 344, "fill": [0, 2, 158, 220, 282, 292, 379, 380, 381, 382, 383, 385, 386], "filter": [0, 101, 315, 316, 317, 337, 341], "filter_and_map": 310, "filter_fn": [337, 341], "final": [2, 4, 5, 6, 164, 445, 448], "find": [2, 4, 8, 457], "find_packag": 2, "finder": 8, "fine": [453, 460], "finetun": 310, "finish": 2, "finit": [0, 215], "first": [0, 1, 2, 3, 4, 5, 6, 8, 114, 117, 155, 161, 172, 174, 182, 191, 193, 195, 223, 238, 245, 271, 277, 280, 285, 296, 298, 299, 310, 313, 325, 335, 378, 399, 407, 433, 435, 436, 437, 440, 456, 458, 461, 464], "first_lay": 460, "fit": [2, 226, 464], "five": 456, "fix": [2, 5, 8, 460], "flag": [2, 8, 456, 461], "flat": [159, 160, 296, 300], "flat_param": 251, "flatten": [0, 28, 29, 104, 105, 106, 107, 180, 221, 223, 243, 260, 273, 274, 279, 296], "flexibl": 7, "flexibli": 356, "flip": [0, 100, 101], "float": [0, 1, 2, 11, 14, 16, 18, 77, 138, 139, 140, 141, 142, 157, 158, 164, 167, 172, 180, 215, 227, 229, 233, 235, 295, 303, 314, 318, 319, 320, 325, 329, 331, 337, 349, 361, 365, 369, 375, 377, 378, 379, 380, 381, 382, 383, 385, 386, 399, 400, 401, 403, 407, 410, 411, 422, 423, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 446, 448, 449], "float16": [1, 2, 11, 139, 164, 185, 303, 337, 460, 461], "float16_t": [1, 2], "float32": [0, 1, 2, 11, 18, 136, 139, 142, 164, 165, 172, 180, 181, 184, 219, 231, 233, 234, 235, 239, 240, 282, 291, 303, 378, 379, 380, 381, 382, 383, 384, 385, 386, 398, 400, 407, 445, 446, 447, 448, 449, 456, 457, 458, 459, 460, 461, 462, 463], "float64": 172, "floor": [0, 1, 157], "floor_divid": 0, "flow": [0, 267, 460], "flush": 2, "fn": [294, 297, 298, 299, 462], "follow": [1, 2, 5, 6, 7, 8, 18, 101, 112, 137, 159, 180, 222, 226, 298, 310, 389, 390, 404, 432, 433, 434, 435, 436, 437, 438, 444, 453, 456, 457, 458, 464], "foo": 457, "food": 5, "forc": [5, 6, 310, 457, 462], "forg": 8, "formal": [112, 137, 226], "format": [5, 185, 248, 249, 250, 251, 252, 461], "formula": 410, "forth": 378, "forward": [1, 2, 285, 456, 460], "found": 341, "four": 314, "fourier": [143, 144, 145, 146, 147, 148, 152, 153, 154], "frac": [130, 226, 255, 312, 313, 314, 318, 319, 320, 325, 329, 331, 333, 334, 335, 361, 380, 381, 382, 383, 399, 401, 403, 406, 417, 419, 420, 432, 434, 435, 436, 437, 443], "fraction": 18, "framework": [2, 7], "free": 207, "freez": [310, 354, 429], "freq": 141, "frequenc": [141, 365, 369], "frequent": [456, 460], "friend": 5, "fro": 180, "frobeniu": 180, "from": [0, 1, 2, 5, 6, 7, 82, 111, 112, 114, 117, 118, 121, 122, 123, 137, 139, 150, 151, 153, 154, 158, 159, 164, 180, 185, 195, 199, 204, 207, 220, 226, 228, 229, 230, 231, 232, 233, 236, 239, 251, 264, 267, 269, 273, 274, 279, 280, 290, 292, 296, 297, 298, 299, 300, 310, 333, 342, 344, 357, 380, 381, 382, 383, 385, 386, 401, 410, 426, 431, 455, 456, 457, 458, 460, 461, 462, 463, 464], "from_embed": 359, "from_linear": 360, "front": 2, "frozen": [310, 342, 352, 354, 360, 429], "fuction": 125, "full": [0, 1, 2, 6, 65, 78, 101, 259, 355, 356, 401, 456, 457, 460], "full_turn": 369, "fulli": [2, 7, 456, 457, 461, 464], "fun": [93, 161, 173, 285, 288, 289, 456, 459, 460, 464], "fun1": 460, "func": 362, "function": [0, 1, 2, 3, 4, 5, 6, 7, 16, 82, 93, 108, 125, 130, 131, 139, 161, 167, 173, 177, 178, 179, 180, 181, 182, 183, 195, 255, 285, 288, 289, 294, 295, 297, 298, 299, 310, 322, 323, 326, 327, 328, 336, 338, 342, 349, 354, 358, 362, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 412, 417, 419, 420, 421, 422, 423, 424, 426, 431, 440, 453, 455, 457, 459, 460, 461, 463], "functool": 456, "further": [2, 8, 458], "fuse": [1, 456], "fusibl": 456, "futur": [5, 360, 459, 460], "g": [3, 8, 108, 139, 180, 226, 330, 425, 443, 444, 460, 465], "g_t": [330, 432, 434, 435, 436, 437, 438, 443, 444], "gain": [380, 381, 382, 383], "gamma": [314, 325, 329, 331, 361, 380, 381, 382, 383], "gap": 1, "gate": [323, 324, 391], "gather": [0, 117, 159, 160], "gather_mm": [0, 160], "gather_qmm": 0, "gaurante": 287, "gaussian": [4, 322, 388, 389, 390, 401], "gaussian_nll_loss": 310, "gelu": [310, 389, 390, 456], "gelu_approx": [310, 322, 388], "gelu_fast_approx": [310, 322, 388], "geluapprox": 322, "gelufast": 322, "gener": [0, 1, 2, 3, 4, 11, 18, 100, 136, 139, 150, 151, 184, 199, 229, 234, 235, 236, 239, 240, 377, 453, 456, 459, 460, 465], "general_": 2, "generate_stub": 8, "geq": [375, 423], "get": [2, 4, 6, 8, 98, 99, 100, 109, 110, 201, 202, 203, 204, 232, 310, 456, 458, 460, 464], "get_cache_memori": 200, "get_command_encod": 2, "get_kernel": 2, "gguf": [8, 185, 249, 463], "gh": 1, "gii": 1, "git": 8, "github": [4, 6, 8, 456], "give": [2, 5, 6, 28, 456], "given": [0, 2, 8, 15, 17, 28, 38, 82, 90, 92, 94, 104, 105, 106, 107, 112, 114, 127, 132, 134, 137, 143, 144, 145, 146, 147, 148, 152, 153, 154, 158, 159, 180, 194, 196, 198, 207, 211, 215, 217, 225, 234, 236, 246, 254, 259, 261, 266, 270, 272, 278, 279, 280, 282, 283, 284, 286, 301, 312, 313, 318, 334, 335, 341, 357, 399, 401, 407], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [115, 117, 118, 119, 121, 122, 123, 128, 237, 295, 453, 456], "glorot": [380, 381], "glorot_norm": 310, "glorot_uniform": 310, "glu": [5, 310], "gm": 1, "gn": 1, "go": [2, 5, 458], "golub": 180, "good": [2, 8, 431, 456, 457, 464], "goroshin": 319, "gower": 5, "gpu": [1, 3, 7, 8, 201, 456, 459, 464], "gputrac": [3, 209], "grad": [2, 4, 6, 285, 295, 431, 439, 456, 457, 458, 459, 460, 462], "grad_fn": [4, 456, 458], "gradient": [0, 4, 6, 108, 161, 267, 285, 294, 295, 310, 342, 355, 360, 377, 406, 429, 431, 432, 433, 435, 436, 437, 438, 439, 442, 444, 456, 457, 458, 459, 460, 461, 462], "grain": 453, "graph": [2, 5, 6, 7, 458], "great": 3, "greater": [0, 5, 28, 135, 163, 223, 295, 375, 423], "greater_equ": 0, "grep": 8, "grid": [2, 139, 199], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [4, 5, 400, 410], "group": [0, 1, 97, 98, 99, 100, 112, 117, 118, 119, 121, 122, 123, 137, 142, 160, 226, 227, 287, 293, 325, 359, 360, 457], "group_dim": 2, "group_siz": [0, 112, 137, 160, 226, 227, 293, 359, 360], "groupnorm": 310, "grow": 460, "gru": 310, "guid": [2, 7], "gw": 1, "h": [1, 2, 97, 98, 99, 180, 313, 314, 316, 317, 319, 320, 324, 330, 335, 362, 458, 460], "h_": [313, 324, 330, 335, 362], "h_in": 1, "h_stride": 1, "h_t": [324, 330, 362], "ha": [2, 3, 5, 6, 7, 8, 77, 93, 114, 123, 149, 150, 152, 153, 154, 161, 177, 178, 179, 182, 183, 199, 203, 230, 314, 324, 330, 333, 362, 429, 431, 456, 459, 460, 462, 464], "had": 5, "hadamard": [0, 164], "hadamard_transform": 0, "half": [2, 18, 236, 240, 365, 460], "halv": [323, 391], "hand": [5, 458, 460], "handi": 458, "handl": [2, 310, 456], "happen": [2, 5, 138, 377, 431, 456, 460], "happi": 5, "hard": 5, "hard_shrink": [310, 326], "hard_tanh": [310, 327], "hardshrink": [310, 392], "hardswish": 310, "hardtanh": [310, 393], "hat": [112, 137, 226], "have": [0, 1, 2, 5, 8, 16, 81, 83, 84, 85, 89, 117, 150, 151, 153, 154, 160, 167, 195, 209, 230, 287, 296, 330, 357, 367, 438, 440, 455, 456, 457, 459, 460, 464], "haven": 5, "hazan": 434, "he": [5, 382, 383], "he_norm": 310, "he_uniform": 310, "head": [142, 357, 377], "header": [2, 139], "heart": 5, "heavi": 5, "height": [313, 314, 316, 317, 319, 320, 335], "hello": [296, 300], "help": [2, 5, 456, 464], "helper": [5, 139, 456], "henc": [0, 2, 226, 456], "hendryck": 390, "here": [2, 5, 431, 456, 458, 460, 463, 464], "hf": 330, "hg": 330, "hh": 362, "hi": [5, 330], "hidden": [324, 330, 362, 377], "hidden_dim": [6, 429, 431], "hidden_s": [324, 330, 362], "hierarchi": 303, "high": [236, 240, 310, 321, 386, 426], "high_pad_s": 0, "higher": [2, 166, 407, 458], "highli": 8, "him": 5, "hing": 402, "hinge_loss": 310, "hinton": 443, "hit": 2, "hn": 324, "ho": 330, "hold": [2, 5, 10, 11, 180, 456], "homebrew": 457, "hopkin": 180, "host": 2, "host1": 457, "host2": 457, "host_nam": [1, 2], "hostfil": 457, "hostnam": 457, "hot": 400, "hour": 5, "how": [2, 5, 6, 310, 312, 313, 315, 316, 317, 321, 334, 335, 359, 378, 439, 456, 459, 464], "howev": [2, 108, 310, 322, 325, 440, 453, 456, 457, 460, 461], "hr": 324, "http": [325, 329, 331, 336, 361, 390, 412], "huber": 403, "huber_loss": 310, "human": [382, 383], "hundr": 8, "hurri": 5, "hutter": 436, "hyperbol": [0, 20, 22, 25, 103, 258, 276, 376, 424], "hz": 324, "i": [0, 1, 2, 3, 5, 6, 7, 8, 16, 18, 28, 37, 77, 82, 92, 98, 99, 100, 101, 104, 105, 106, 107, 108, 113, 114, 117, 118, 120, 121, 122, 123, 125, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 164, 167, 172, 173, 177, 178, 179, 180, 181, 182, 183, 185, 190, 194, 195, 199, 205, 208, 222, 223, 226, 227, 234, 235, 244, 248, 249, 250, 255, 259, 261, 266, 267, 272, 273, 274, 277, 280, 281, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 299, 303, 305, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 329, 330, 331, 333, 334, 335, 341, 342, 348, 350, 351, 353, 354, 356, 357, 358, 360, 361, 362, 365, 369, 375, 377, 378, 382, 383, 388, 390, 398, 399, 401, 406, 407, 410, 411, 413, 418, 423, 429, 431, 433, 436, 438, 439, 440, 445, 447, 448, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "i386": 8, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 330, "iclr": [435, 436, 437], "id": [6, 8], "idea": [458, 460], "idempot": [342, 354], "ident": [0, 108, 136, 267, 310, 351], "identifi": [2, 296, 455], "idim": 6, "idiom": [6, 456], "idx": [38, 459], "ie": [354, 457], "ieee": 303, "ignor": [5, 38, 92, 93, 132, 433], "ih": 362, "ii": 1, "ij": 199, "imag": [316, 317, 319, 320, 378], "imagenet": [382, 383], "immedi": [5, 337], "implement": [0, 1, 4, 6, 141, 142, 180, 321, 341, 357, 365, 367, 369, 375, 377, 378, 423, 432, 433, 434, 435, 437, 438, 439, 451, 456, 458], "impli": 287, "implicit": [453, 456, 458], "implicitli": 460, "import": [2, 3, 4, 5, 6, 8, 108, 164, 180, 251, 285, 296, 297, 298, 299, 300, 310, 312, 313, 314, 329, 334, 335, 344, 378, 398, 400, 407, 426, 429, 431, 456, 457, 458, 459, 460, 461, 462], "improv": [1, 2, 3, 5, 398, 432, 433, 434, 435, 436, 437, 443, 456, 457], "in_ax": [289, 458], "in_channel": [315, 316, 317], "in_dim": [310, 429], "in_proj": 429, "inci": 2, "includ": [1, 2, 104, 105, 106, 107, 139, 202, 203, 208, 331, 338, 350, 360, 401, 431, 456, 458, 459, 462, 463, 465], "include_dir": 2, "inclus": [0, 41, 42, 43, 44, 104, 105, 106, 107, 155], "incom": 2, "inconveni": 456, "incorpor": 461, "incorrect": 461, "increment": 18, "incur": [5, 8], "incx": 2, "independ": [116, 319, 320], "index": [0, 1, 2, 7, 9, 28, 38, 134, 136, 161, 199, 223, 273, 274, 285, 301], "indic": [0, 2, 16, 26, 27, 28, 29, 38, 159, 160, 161, 167, 168, 169, 170, 171, 172, 182, 261, 273, 274, 285, 351, 353, 400, 407, 447, 459], "indices_or_sect": [71, 261], "indirectli": 461, "individu": [310, 319, 320], "ineffici": [459, 460], "inexact": [11, 172], "inf": [180, 215, 357], "infer": [7, 158, 185, 280, 457], "infin": [0, 168, 170, 171, 215, 334, 335, 437], "infinit": [16, 167], "info": [5, 8], "inform": [3, 5, 6, 8, 127, 201, 249, 250, 303, 310, 314, 322, 357, 458, 464], "inherit": [6, 455], "inifn": 168, "init": [310, 358, 426, 431, 445, 446, 448, 449, 457], "init_fn": [379, 380, 381, 382, 383, 384, 385, 386, 426], "init_valu": 1, "initi": [1, 3, 4, 5, 119, 139, 299, 310, 314, 325, 329, 331, 333, 358, 361, 379, 380, 381, 382, 383, 384, 385, 386, 429, 440, 445, 446, 448, 449, 456, 457, 460], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 456], "inorm": 329, "inp": [1, 139], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 8], "input": [0, 1, 2, 4, 5, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 117, 118, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 238, 241, 242, 243, 244, 245, 246, 247, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 292, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 329, 330, 331, 333, 334, 335, 357, 360, 361, 362, 365, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 391, 398, 399, 401, 402, 403, 404, 406, 407, 409, 411, 423, 426, 456, 458, 459, 462, 463], "input_dil": [0, 100], "input_dim": [6, 310, 333, 360], "input_s": [324, 330, 362], "inputs1": 407, "inputs2": 407, "insert": [114, 134, 464], "insid": 456, "inspect": [3, 456, 462], "inspir": 7, "instabl": 411, "instal": 2, "instanc": [5, 38, 108, 226, 300, 310, 329, 337, 338, 339, 342, 344, 345, 346, 351, 354, 355, 356, 367, 429, 461], "instancenorm": 310, "instanti": [1, 2, 6, 460], "instantiate_axpbi": 2, "instead": [2, 8, 108, 310, 356, 369, 457, 458, 460], "int": [0, 1, 2, 5, 6, 9, 15, 17, 18, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 56, 57, 58, 59, 60, 63, 66, 68, 71, 74, 75, 76, 77, 79, 82, 89, 90, 94, 97, 98, 99, 100, 104, 105, 106, 107, 112, 113, 114, 121, 122, 123, 127, 134, 136, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 161, 165, 172, 180, 184, 194, 196, 198, 201, 202, 203, 204, 207, 208, 211, 213, 219, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 246, 259, 260, 261, 264, 265, 266, 270, 271, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 293, 301, 310, 312, 313, 314, 315, 316, 317, 321, 323, 324, 325, 329, 330, 331, 333, 334, 335, 357, 359, 360, 361, 362, 365, 369, 377, 391, 399, 400, 404, 409, 411, 429, 445, 447, 448, 449], "int16": 303, "int32": [0, 1, 11, 18, 38, 155, 172, 180, 236, 303, 378, 459, 462], "int64": [11, 303], "int8": [11, 303], "int_0": 130, "integ": [0, 11, 157, 159, 160, 172, 180, 201, 222, 226, 227, 229, 236, 261, 277, 289, 303, 321, 349, 447, 459], "integr": [18, 273, 460], "intend": [0, 456], "interact": 377, "interest": 464, "interfac": 2, "intermedi": 461, "intern": 314, "interpol": 378, "interv": [18, 184, 236, 240], "intuit": 310, "invalid": [0, 82], "invers": [0, 19, 20, 21, 22, 23, 24, 25, 131, 146, 147, 148, 149, 150, 151, 178, 179, 183], "invert": 0, "involv": [431, 456], "ip": 457, "is_avail": 119, "is_equival": 2, "is_floating_point": 2, "is_leaf": [296, 297, 298, 299], "is_leaf_fn": 341, "isclos": 0, "isfinit": 0, "ish": 5, "ishmael": 5, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [457, 458, 461], "issubdtyp": [11, 303], "item": [0, 2, 4, 5, 6, 297, 431, 460, 461, 462], "iter": [4, 6, 182, 297, 298, 453, 456, 460], "iterm": 8, "itertool": [5, 297], "its": [0, 1, 2, 8, 178, 195, 223, 238, 282, 294, 300, 310, 360, 431, 435, 436, 437, 457, 461, 464], "itself": [2, 293, 440], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [5, 8, 180, 319, 434, 435, 437], "j8": 2, "jacobian": [2, 173, 288, 462], "jain": 319, "jax": [7, 453], "jit": 139, "jmlr": 434, "jnp": 461, "john": 180, "join": 447, "join_schedul": 431, "jointli": 234, "just": [2, 6, 331, 456, 459], "jvp": [2, 108, 462], "k": [0, 5, 45, 89, 113, 136, 142, 159, 164, 279, 282, 283, 284, 312, 333, 334, 342], "k_h": [313, 335], "k_w": [313, 335], "kaim": 383, "keep": [2, 15, 17, 26, 27, 194, 196, 198, 211, 225, 266, 270, 286, 310, 341, 458, 460], "keepdim": [0, 15, 17, 26, 27, 33, 34, 35, 36, 56, 57, 58, 59, 63, 75, 79, 180, 194, 196, 198, 211, 225, 259, 266, 270, 286], "kei": [1, 3, 5, 142, 201, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 296, 297, 341, 342, 354, 357, 440, 453, 455, 458], "kernel": [2, 7, 8, 97, 98, 99, 100, 139, 312, 313, 334, 335, 456, 459], "kernel_dil": [0, 100], "kernel_s": [312, 313, 315, 316, 317, 334, 335], "key_cach": 5, "key_input_dim": 357, "key_proj": 5, "keyword": [161, 251, 252, 285, 297, 310, 453, 463, 465], "kind": 5, "kingma": [435, 437], "kl_div_loss": 310, "kname": 2, "know": [2, 5], "known": [368, 418], "kth": [0, 28, 223], "kullback": 404, "kw_onli": 2, "kwarg": [10, 116, 251, 252, 465], "kwd": 11, "l": [5, 6, 177, 178, 310, 312, 314, 315, 324, 330, 334, 362, 410], "l1": [285, 403, 405, 406, 410], "l1_loss": 310, "l2": [403, 406, 444], "l2_loss": 310, "l_": [312, 334, 403], "la": 180, "label": [3, 4, 400, 407], "label_smooth": 400, "lack": 459, "lambd": [326, 373, 392, 422], "lambda": [297, 298, 299, 310, 326, 337, 342, 349, 373, 392, 416, 422, 432, 433, 434, 435, 436, 437, 438, 443, 444, 456, 457, 458], "languag": [1, 2], "larg": [5, 310, 357, 406, 456, 457, 460], "larger": [1, 141, 365, 438], "largest": [180, 215, 279], "lasso": 285, "last": [0, 1, 5, 29, 77, 138, 140, 145, 148, 150, 151, 153, 154, 155, 159, 160, 166, 177, 178, 179, 181, 182, 183, 195, 204, 230, 260, 277, 287, 315, 316, 317, 319, 320, 325, 378, 461], "latenc": 457, "later": [3, 8, 431], "latest": 456, "launch": [1, 2, 119, 457, 459], "layer": [7, 138, 293, 310, 312, 313, 319, 320, 324, 325, 330, 331, 333, 334, 335, 351, 356, 359, 360, 362, 367, 377, 425, 429], "layer_s": 6, "layernorm": 310, "layout": 1, "lazi": [7, 429, 462], "lazili": [5, 310], "lceil": 89, "ld": [324, 330, 362], "ldot": [312, 313, 334, 335], "lead": [0, 18, 82, 456], "leaf": [93, 293, 296, 297, 298, 299, 341], "leaf_modul": 310, "leaki": [332, 395], "leaky_relu": 310, "leakyrelu": 310, "learn": [4, 6, 7, 314, 325, 329, 331, 358, 361, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444], "learnabl": [315, 316, 317, 367], "learning_r": [6, 431, 432, 433, 434, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 456], "least": [5, 83, 84, 85, 92, 177, 178, 179, 181, 182, 183, 226], "leav": [2, 132, 297, 298, 299], "lectur": 443, "lecun": 319, "left": [0, 5, 141, 174, 180, 226, 312, 313, 322, 334, 335, 365, 378, 389, 390, 401, 403, 411], "left_shift": 0, "leibler": 404, "len": [5, 145, 148, 151, 154, 164, 447], "length": [5, 264, 314, 315, 324, 330, 362, 447], "leq": [403, 416], "less": [0, 5, 28, 176, 223, 365, 410], "less_equ": 0, "let": [1, 2, 4, 5, 178, 456, 458, 460, 461], "level": [0, 159, 160, 382, 383], "lfloor": [312, 313, 334, 335], "lh": [324, 330, 362], "lhs_indic": [0, 159, 160], "lhs_mask": 89, "lib": 457, "libmlx": 8, "libmlx_ext": 2, "libmpi": 457, "librari": [2, 8, 305, 310], "like": [2, 5, 7, 122, 172, 220, 292, 320, 406, 440, 442, 456, 457, 458, 460, 461, 462, 464], "likelihood": [401, 409], "limit": [0, 2, 92, 207, 208, 459], "linalg": 164, "line": [5, 457, 460, 461], "linear": [0, 2, 5, 6, 7, 293, 297, 310, 322, 323, 332, 344, 360, 362, 363, 364, 366, 368, 378, 387, 388, 389, 390, 391, 395, 414, 415, 416, 418, 426, 429, 440, 448, 456], "linear1": 5, "linear2": 5, "linear3": 5, "linear_schedul": [431, 447], "linearli": 357, "link": [2, 8], "linspac": 0, "lion": 431, "list": [5, 10, 15, 17, 30, 71, 77, 82, 83, 84, 85, 90, 93, 94, 100, 127, 132, 144, 145, 147, 148, 150, 151, 153, 154, 158, 161, 173, 180, 194, 196, 198, 199, 211, 219, 222, 225, 229, 230, 231, 233, 234, 235, 236, 239, 240, 249, 259, 261, 265, 266, 270, 277, 278, 281, 285, 286, 288, 291, 296, 299, 300, 310, 342, 344, 345, 346, 347, 352, 354, 355, 356, 429, 431, 435, 436, 437, 438, 447, 455, 456, 457, 458, 460], "liter": [2, 222, 378, 382, 383, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "littl": 5, "liu": 5, "live": [7, 139, 464], "ll": [1, 4, 6, 403, 456, 458], "llama": 5, "llamaattent": 5, "llamaencoderlay": 5, "llm": 7, "load": [6, 7, 305, 344, 457], "load_weight": [310, 460], "loader": 6, "loader_path": 2, "loan": 180, "loc": [1, 233, 235], "local": [310, 319, 457], "locat": [0, 2, 82, 355, 356, 457, 464], "log": [0, 188, 190, 194, 396, 397, 398, 401, 404, 406, 409, 421], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 310, "log_sigmoid": 310, "log_softmax": 310, "logaddexp": 0, "logarithm": [0, 186, 187, 188, 189], "logcosh": 406, "logic": [0, 2, 191, 192, 193], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 4, 255, 390, 418], "logit": [5, 230, 398, 400, 456], "logsumexp": 0, "long": 5, "longer": [5, 101, 458], "look": [2, 5, 457], "lookup": 321, "loop": [5, 6, 456, 457, 458, 460], "loshchilov": 436, "loss": [4, 6, 285, 310, 431, 456, 457, 458, 460], "loss_and_grad": 310, "loss_and_grad_fn": [6, 431, 456, 458], "loss_fn": [4, 6, 431, 456, 458], "loss_grad_fn": 457, "lot": [457, 458], "low": [236, 240, 386, 426], "low_pad_s": 0, "lower": [177, 178, 183, 226, 236, 239, 240, 282, 386], "lr": [4, 438], "lr_schedul": [445, 446, 447, 449], "lstm": 310, "lto": 2, "lu": 5, "luckili": 460, "lvalu": 285, "m": [0, 2, 5, 8, 89, 136, 159, 164, 180, 282, 312, 313, 334, 335, 432, 456], "m1": [1, 5, 456, 458, 464], "m10": 303, "m7": 303, "m_": [435, 436, 437, 438], "m_t": [435, 436, 437, 438], "mac": 457, "machin": [5, 7, 8, 443, 457], "maco": 8, "macosx": 8, "made": [5, 305], "mai": [2, 180, 293, 319, 457, 458, 459], "main": [7, 114, 136, 139, 280, 297, 298, 310, 457], "maintain": [319, 320, 438], "major": [0, 2], "make": [1, 2, 3, 5, 6, 8, 195, 217, 254, 310, 445, 446, 448, 449, 456, 460, 462, 464], "make_shar": 2, "malloc_or_wait": 2, "man": 5, "manag": [268, 453, 457, 464], "mani": [2, 82, 261, 315, 316, 317, 321, 359, 456, 457, 460], "manual": 310, "map": [2, 6, 38, 185, 297, 321, 337], "map_fn": [337, 341], "map_torch_to_mlx": 5, "margin": [407, 411], "margin_ranking_loss": 310, "mask": [0, 5, 89, 142, 351, 357, 459], "mask_lh": [0, 89], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 89], "mask_rh": [0, 89], "mask_s": 1, "mask_sw": 1, "matadata": 185, "match": [8, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 202, 344, 378, 400, 457, 459, 461], "materi": [5, 7], "math": [5, 411, 456], "mathbf": 178, "mathcal": 333, "mathemat": 180, "mathrm": [130, 255, 329], "matmul": [0, 159, 464], "matric": [180, 181, 182], "matrix": [0, 4, 14, 45, 89, 112, 113, 136, 137, 159, 160, 164, 165, 177, 178, 179, 180, 181, 182, 183, 195, 199, 226, 227, 234, 359, 360, 384, 426], "matter": [5, 310], "max": [0, 1, 2, 180, 197, 334, 335, 358, 393, 394, 399, 401, 402, 407, 411, 413, 415, 433, 437, 456, 458, 464], "max_": [334, 335], "max_buffer_s": 201, "max_freq": 369, "max_i": 226, "max_norm": 295, "max_recommended_working_set_s": 201, "max_val": 393, "maximum": [0, 6, 26, 38, 92, 104, 204, 208, 295, 310, 332, 363, 369, 389, 390, 395, 414, 429, 460], "maxpool1d": 310, "maxpool2d": 310, "maxtotalthreadsperthreadgroup": 2, "mca": 457, "md": 180, "me": 5, "mean": [0, 1, 4, 5, 6, 140, 233, 234, 235, 285, 310, 314, 325, 342, 361, 385, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 456, 458, 461], "meant": 108, "measur": 464, "mechan": 377, "medic": 320, "meet": 8, "member": [2, 310, 347, 352], "memori": [0, 1, 2, 7, 82, 200, 202, 203, 204, 206, 207, 208, 377, 429, 433, 456, 460, 461], "memory_order_relax": 1, "memory_s": 201, "memoryview": [460, 461], "merg": 456, "meshgrid": 0, "metadata": [4, 185, 249, 250], "metal": [2, 7, 139], "metal_captur": 3, "metal_kernel": 1, "metal_path": 8, "metallib": [2, 8], "method": [2, 5, 9, 10, 30, 108, 116, 139, 293, 301, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 348, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 429, 432, 433, 434, 435, 436, 437, 438, 440, 443, 444, 451], "millisecond": [8, 456, 464], "min": [0, 2, 180, 212, 358, 393, 394, 413, 415], "min_freq": 369, "min_i": 226, "min_val": 393, "mind": [2, 5], "mine": 5, "minibatch": 6, "minim": 457, "minimum": [0, 27, 38, 92, 105, 369, 398, 399], "minsizerel": 8, "minu": 135, "minut": 5, "mish": 310, "miss": [344, 463], "mix": 459, "mkdir": [3, 8], "ml": 8, "mlp": [6, 310, 377, 431], "mlp_dim": [5, 377], "mlx": [1, 3, 4, 5, 6, 8, 305, 310, 426, 429, 431, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "mlx_build_benchmark": 8, "mlx_build_cpu": 8, "mlx_build_exampl": 8, "mlx_build_gguf": 8, "mlx_build_met": [2, 8], "mlx_build_metallib": 2, "mlx_build_python_bind": 8, "mlx_build_safetensor": 8, "mlx_build_test": 8, "mlx_disable_compil": [115, 128, 456], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_include_dir": 2, "mlx_metal_debug": [3, 8], "mlx_metal_jit": 8, "mlx_sample_extens": 2, "mlx_trace": 3, "mnist": 6, "mode": [0, 1, 2, 101, 222, 340, 351, 353, 378, 382, 383, 457], "model": [4, 6, 7, 251, 293, 294, 297, 298, 310, 337, 340, 342, 344, 348, 351, 353, 354, 355, 357, 377, 426, 429, 431, 439, 440, 442, 456, 457, 460], "modest": 2, "modif": 461, "modifi": 461, "modul": [2, 5, 6, 11, 293, 294, 367, 377, 426, 442, 455, 456, 460], "moment": [5, 433, 435, 436, 437], "momentum": [314, 438, 440, 444, 456], "monei": 5, "monoton": 412, "more": [1, 2, 3, 6, 10, 77, 114, 159, 177, 178, 179, 182, 183, 195, 207, 208, 249, 250, 303, 310, 314, 319, 365, 369, 377, 378, 380, 381, 382, 383, 398, 453, 456, 457, 458, 459, 462, 464], "most": [2, 230, 310, 442, 456, 457, 458, 459, 460], "move": [0, 2, 213, 464], "moveaxi": 0, "mpi": 305, "mpiexec": 457, "mpirun": 457, "mse": 285, "mse_loss": 310, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 444, "much": [1, 2, 5, 312, 313, 334, 335, 456, 460], "multi": [7, 142, 315, 316, 317, 459, 461], "multidimension": 199, "multiheadattent": [5, 310], "multipl": [0, 1, 8, 14, 89, 138, 140, 159, 160, 195, 214, 226, 227, 357, 369, 446, 447, 449, 456, 460, 463], "multipli": [0, 2, 38, 160, 226, 227, 318, 369, 378], "murtadha": 5, "must": [0, 1, 2, 3, 8, 89, 92, 141, 158, 160, 180, 229, 230, 234, 236, 239, 240, 290, 378, 461], "mx": [1, 2, 3, 4, 5, 6, 38, 95, 96, 108, 119, 122, 139, 155, 172, 180, 181, 185, 251, 285, 295, 310, 312, 313, 314, 329, 332, 334, 335, 337, 344, 348, 363, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 395, 398, 399, 400, 404, 407, 414, 424, 426, 429, 431, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "my": [5, 8], "my_devic": 465, "my_path": 251, "myexp": [1, 139], "myexp_strid": 1, "mymlp": 429, "n": [0, 1, 2, 5, 30, 89, 97, 98, 99, 100, 136, 143, 145, 146, 148, 149, 152, 154, 164, 165, 234, 266, 282, 286, 312, 313, 314, 315, 316, 317, 319, 320, 324, 330, 334, 335, 362, 378, 406, 411, 457], "n_i": [312, 313, 334, 335], "n_t": 324, "naiv": [2, 458], "naive_add": 458, "name": [1, 2, 11, 139, 160, 185, 226, 227, 249, 250, 251, 252, 310, 325, 341, 344, 346, 457, 459, 463], "named_modul": 310, "nan": [0, 16, 81, 167, 169, 215], "nan_to_num": 0, "nanobind": [2, 377], "nanobind_add_modul": 2, "nativ": 8, "natur": [0, 186, 188, 460], "nb": 2, "nb_domain": 2, "nb_func": 377, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 314, "ndarrai": [30, 459, 460, 462], "ndhwc": [317, 320], "ndim": [0, 1, 2, 155, 180, 182, 378], "ne": 1, "nearest": [1, 378], "necessari": 310, "necessarili": 279, "need": [1, 2, 5, 6, 7, 8, 81, 226, 310, 355, 356, 369, 377, 453, 457, 458, 460, 461, 462, 464], "neg": [0, 114, 155, 170, 215, 280, 332, 334, 335, 357, 401, 409, 411, 459], "negat": [0, 216], "negative_slop": [332, 395], "neginf": [0, 215], "neighbor": 378, "neither": [161, 285], "nelem": 2, "nervou": 5, "nest": [77, 93, 299, 310, 429, 455, 458], "nesterov": 444, "network": [5, 7, 314, 319, 321, 380, 381, 426, 429, 443, 457], "neural": [5, 7, 321, 380, 381, 412, 426, 429, 443], "never": [5, 460], "new": [0, 2, 6, 90, 114, 213, 217, 244, 265, 281, 287, 297, 298, 349, 357, 429, 431, 442, 447, 456, 459, 460, 461], "new_tre": 298, "next": [2, 5, 6, 207], "nh": [324, 330, 362], "nhwc": [314, 316], "nice": [458, 460], "nlc": [314, 315], "nld": [324, 330, 362], "nlh": [324, 330, 362], "nll": [401, 409], "nll_loss": 310, "nn": [2, 5, 6, 251, 297, 310, 426, 429, 431, 440, 442, 456, 460], "nobodi": 5, "node": [93, 132, 289, 298, 299], "nois": 4, "noisi": 4, "nomins": 2, "non": [0, 1, 2, 8, 199, 352, 362, 412, 429], "none": [1, 2, 5, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 206, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 296, 297, 298, 299, 301, 312, 313, 322, 334, 335, 337, 341, 342, 349, 354, 357, 362, 369, 377, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 433, 451, 459], "nonlinear": [362, 456], "nonzero": 459, "noop": 354, "nor": [2, 161, 285], "norm": [5, 140, 295, 325, 411, 437, 438], "norm1": 5, "norm2": 5, "norm_first": 377, "normal": [1, 2, 4, 5, 138, 139, 140, 234, 239, 310, 312, 313, 314, 325, 329, 331, 334, 335, 361, 377, 380, 382, 461, 464], "not_equ": 0, "notabl": [5, 7], "notat": [112, 137, 296, 346], "note": [0, 2, 5, 8, 16, 82, 89, 93, 99, 108, 142, 150, 151, 160, 167, 180, 202, 226, 230, 287, 293, 310, 361, 378, 431, 461, 463], "noth": [5, 310, 460], "notic": [5, 458, 463], "now": [1, 2, 5, 8, 360, 456, 457, 461], "np": [1, 5, 6, 457, 461, 462], "npy": [185, 248, 463], "npz": [5, 185, 251, 252, 344, 348, 463], "nuclear": 180, "nullopt": 0, "num": [0, 5, 184, 238], "num_class": [6, 431], "num_decoder_lay": 377, "num_embed": [321, 359], "num_encoder_lay": 377, "num_epoch": [6, 431], "num_exampl": 4, "num_featur": [4, 314], "num_group": 325, "num_head": [5, 357, 377], "num_it": 4, "num_lay": [5, 6, 431], "num_param": 310, "num_paramet": 358, "num_sampl": 230, "num_split": 0, "number": [0, 2, 11, 18, 61, 70, 93, 98, 99, 100, 112, 136, 137, 160, 161, 165, 173, 184, 215, 222, 226, 227, 230, 233, 235, 238, 240, 243, 246, 277, 278, 282, 285, 288, 289, 293, 310, 314, 315, 316, 317, 319, 320, 325, 329, 357, 358, 377, 378, 380, 381, 382, 383, 445, 447, 448, 453, 456, 458, 465], "number_of_el": 0, "numer": [5, 138, 140, 180, 190, 194, 259, 314, 325, 329, 331, 361, 398, 399, 401, 411, 432, 433, 434, 435, 436, 437, 443, 456, 460], "numpi": [2, 5, 6, 7, 13, 16, 18, 86, 87, 88, 90, 124, 125, 129, 162, 163, 167, 174, 175, 176, 190, 195, 197, 212, 214, 218, 224, 242, 245, 269, 460, 462, 463], "nw": 1, "nwhc": 319, "o": [2, 8, 142, 330], "o_t": 330, "obj": 249, "object": [3, 10, 30, 50, 77, 93, 172, 251, 289, 296, 297, 298, 299, 303, 319, 377, 455], "observ": 5, "occupi": [112, 137, 160, 226, 227], "occur": 461, "odim": 6, "odot": [324, 330], "off": [5, 8, 460], "offer": 406, "offset": [0, 1, 2, 5, 46, 82, 114, 138, 141, 280], "often": 320, "ok": [344, 458], "okai": [456, 460], "old": 5, "omit": [435, 437, 457], "onc": [2, 8, 456], "one": [0, 2, 5, 8, 38, 77, 83, 92, 98, 99, 100, 134, 136, 138, 140, 141, 180, 188, 195, 227, 230, 264, 269, 303, 354, 378, 400, 457, 464], "ones": [0, 2, 5, 220, 251, 282, 355, 356, 431, 457, 459], "ones_lik": 0, "onli": [1, 2, 5, 7, 8, 81, 89, 98, 99, 100, 180, 226, 234, 287, 310, 341, 342, 344, 349, 351, 354, 355, 356, 429, 456, 457, 458, 463, 464], "onlin": 434, "op": [1, 2, 221, 287, 342, 460], "open": [3, 8, 18, 236, 240], "openmpi": 457, "oper": [3, 5, 7, 9, 37, 83, 84, 85, 100, 142, 159, 160, 224, 259, 267, 274, 301, 310, 377, 438, 456, 457, 458, 459, 460, 461, 462, 464, 465], "operand": [126, 127, 159], "opportun": 456, "opt": [439, 457], "optim": [3, 4, 6, 7, 355, 456, 457, 458, 460], "option": [0, 3, 5, 14, 15, 17, 18, 26, 27, 28, 29, 82, 83, 84, 85, 89, 93, 94, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 112, 113, 114, 117, 118, 119, 121, 122, 123, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 165, 170, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 194, 196, 198, 199, 208, 211, 215, 219, 222, 223, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 243, 244, 259, 260, 261, 264, 265, 266, 270, 272, 273, 277, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 293, 296, 297, 298, 299, 312, 313, 314, 315, 316, 317, 324, 330, 333, 334, 335, 337, 341, 342, 344, 349, 354, 357, 359, 360, 362, 365, 369, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 432, 433, 434, 435, 436, 437, 438, 440, 443, 444, 445, 453, 456, 463, 465], "ord": 180, "order": [0, 1, 28, 82, 100, 127, 180, 223, 226, 279, 310, 325, 355, 367, 440, 456, 458], "ordinari": 166, "org": [325, 329, 331, 336, 361, 390, 412], "origin": [5, 114, 295, 314, 350, 380, 381, 382, 383, 432, 433, 434, 435, 437, 438, 461], "orthonorm": 164, "ostream": 2, "ostringstream": 2, "other": [0, 2, 5, 7, 172, 180, 310, 343, 429, 438, 456, 457, 459, 460, 462], "other_input": 310, "otherwis": [18, 100, 119, 208, 293, 296, 297, 298, 299, 342, 344, 354, 375, 377, 378, 392, 398, 403, 410, 422, 423, 460, 461], "ouptut": 8, "our": [1, 2, 5, 6, 367, 432, 433, 434, 435, 437, 438, 457], "out": [0, 1, 2, 8, 89, 139, 312, 313, 319, 320, 334, 335, 351, 456, 457, 458, 459], "out_ax": [289, 458], "out_channel": [315, 316, 317], "out_dim": [310, 429], "out_dtyp": 2, "out_idx": 2, "out_mask": 89, "out_proj": [5, 429], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 456, 460], "outlier": 406, "output": [0, 1, 2, 5, 8, 15, 16, 17, 18, 28, 82, 89, 90, 93, 95, 96, 104, 105, 106, 107, 108, 126, 136, 138, 139, 140, 141, 142, 149, 152, 153, 154, 158, 159, 161, 164, 165, 167, 180, 184, 194, 196, 198, 199, 211, 215, 219, 220, 223, 225, 229, 230, 231, 233, 234, 235, 236, 239, 240, 251, 252, 259, 264, 266, 270, 274, 280, 282, 285, 286, 287, 288, 289, 290, 291, 292, 312, 313, 314, 315, 316, 317, 329, 333, 334, 335, 357, 360, 375, 377, 378, 380, 381, 382, 383, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 423, 426, 456, 457, 458, 459, 460, 461, 462, 463, 464], "output_dim": [6, 310, 333, 360], "output_directori": 2, "output_dtyp": [1, 139], "output_fil": 5, "output_shap": [1, 139], "outsid": [139, 155], "over": [0, 2, 5, 6, 15, 17, 26, 27, 28, 29, 97, 98, 99, 100, 104, 105, 106, 107, 145, 148, 151, 154, 166, 180, 182, 184, 194, 196, 198, 211, 223, 225, 247, 259, 260, 266, 270, 277, 279, 286, 314, 315, 316, 317, 325, 331, 361, 400, 445, 448, 457, 458], "overal": 2, "overhead": [456, 460, 464], "overlap": 1, "overrid": [2, 128], "overview": 3, "overwrit": 5, "own": [8, 461], "owndata": 461, "p": [8, 229, 310, 318, 319, 320, 411, 435, 437], "pack": [160, 226, 227], "packag": [2, 4, 6, 8, 305, 426, 457], "package_data": 2, "pad": [0, 1, 97, 98, 99, 100, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 312, 313, 315, 316, 317, 334, 335], "pad_valu": 0, "pad_width": [0, 222], "padding_hi": 0, "padding_lo": 0, "page": 462, "pain": 5, "pair": [0, 2, 222, 344, 365], "pairwis": 411, "pan": 5, "paper": [314, 369, 432, 433, 434, 435, 437, 438], "parallel": [457, 464], "param": [285, 310, 426, 458], "paramet": [0, 1, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 344, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 369, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 391, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 456, 457, 458, 460], "parameter_scal": 433, "parametr": [358, 413], "pars": 5, "parse_arg": 5, "parser": 5, "part": [1, 2, 458, 459], "partial": [355, 356, 456, 460], "particip": [117, 118, 121, 122, 123], "particular": [226, 325], "particularli": 456, "partit": [0, 28], "pass": [1, 2, 5, 6, 65, 78, 221, 222, 285, 294, 296, 297, 298, 310, 342, 354, 355, 356, 367, 456, 457, 460], "password": 457, "path": [3, 8, 127, 209, 251, 252, 293, 298, 344, 457], "pattern": [310, 460], "peak": [204, 206], "penalti": 444, "pep": 461, "per": [5, 6, 112, 137, 160, 226, 227, 293, 314, 325, 329, 331, 361, 451, 456, 457, 460], "perceptron": 7, "perf_count": 456, "perfectli": 460, "perform": [0, 1, 2, 3, 5, 7, 14, 89, 100, 104, 105, 106, 107, 123, 126, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 164, 195, 227, 246, 259, 273, 310, 325, 377, 382, 383, 431, 456, 457, 459, 460, 464], "perhap": [2, 5], "perm": 6, "permut": [0, 6], "persist": 8, "pg": 180, "phi": [322, 388], "physic": 457, "pi": [130, 322, 369, 389, 458], "pick": 2, "pip": [2, 8], "pipelin": 2, "pixel": 319, "place": [2, 5, 38, 246, 293, 457, 460, 461], "placehold": 456, "plai": [2, 5], "plain": 367, "plan": [2, 456], "platform": 8, "plu": [0, 188], "point": [0, 2, 4, 5, 8, 82, 157, 227, 303], "pointer": 2, "pool": [312, 313, 334, 335, 464], "popul": 2, "portion": 318, "posinf": [0, 215], "posit": [0, 5, 28, 114, 141, 155, 161, 171, 177, 178, 213, 215, 223, 234, 280, 285, 297, 310, 315, 316, 317, 357, 365, 369, 401, 411], "possibl": [261, 321, 359, 456, 457, 459, 464], "possibli": [5, 14, 89, 159, 195, 295], "postur": 5, "potenti": 208, "power": [0, 458, 461], "practic": [2, 456], "pre": [8, 142, 398], "preced": 325, "precis": [0, 2, 5, 135, 142, 310, 322, 361, 398, 439, 456], "preclud": 310, "pred": [402, 406], "predic": [293, 349], "predict": [398, 401, 402, 403, 404, 405, 406, 408, 409, 410], "prefix": [289, 296], "prelu": 310, "prepar": [2, 5], "prepend": [3, 195], "preprint": [5, 432, 438], "preprocessor": 8, "present": 1, "preserv": [244, 458], "press": [5, 180], "pressur": 2, "pretti": [456, 460], "prevent": [267, 411, 461], "previou": [207, 208], "primal": [1, 2, 108, 173, 288], "primit": 458, "print": [1, 2, 4, 5, 6, 8, 295, 296, 297, 298, 300, 310, 453, 456, 457, 458, 459, 460, 461, 462], "prior": [273, 274], "priorit": 458, "privat": 2, "prng": [229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 453], "prob": 398, "probabl": [8, 236, 318, 319, 320, 360, 398, 400, 404, 464], "problem": [4, 6, 310], "process": [5, 100, 101, 116, 117, 118, 119, 121, 122, 123, 297, 298, 320, 321, 377, 455, 457], "processor": 8, "prod": [0, 1], "produc": [0, 2, 8, 93, 357, 426], "product": [0, 2, 14, 82, 106, 166, 173, 195, 221, 225, 277, 288, 357, 462], "profil": 3, "program": [204, 457], "programmat": 356, "project": [3, 5, 357], "project_source_dir": 2, "promot": 2, "promote_typ": 2, "promoted_dtyp": 2, "prompt": 5, "propag": [458, 459], "properti": [31, 38, 47, 51, 61, 62, 68, 70, 350, 353, 441, 458], "proportion": 295, "protocol": 461, "provid": [0, 2, 5, 82, 112, 137, 161, 277, 285, 297, 299, 305, 310, 337, 342, 344, 354, 355, 356, 359, 360, 377, 378, 425, 429, 457, 463, 465], "pseudo": 453, "pth": 5, "public": [2, 310], "pun": 0, "pure": [1, 310, 431], "purpos": [1, 180], "purs": 5, "push": 2, "push_back": 2, "put": [1, 6, 456, 457], "py": [2, 5, 8, 457], "pypi": 8, "python": [1, 3, 5, 50, 68, 77, 132, 296, 297, 298, 299, 300, 429, 439, 440, 442, 455, 457, 458, 461], "python_requir": 2, "pytorch": [5, 7, 322, 325, 458], "pytorch_compat": 325, "q": [142, 181], "qualifi": 457, "qualnam": 11, "quantiz": [0, 112, 137, 160, 185, 227, 359, 360], "quantized_matmul": 0, "quantizedembed": 310, "quantizedlinear": 310, "quarter": 5, "queri": [5, 142, 357], "query_input_dim": 357, "query_proj": 5, "question": [5, 460], "queue": 3, "quick": [2, 7], "quit": [458, 461], "quotient": [0, 124, 125, 157], "r": [2, 5, 181, 285, 319, 324], "r_t": 324, "race": 464, "radian": [0, 111], "rag": 5, "rain": 5, "rais": [0, 5, 180, 208, 224, 261, 344], "ram": 5, "random": [1, 2, 3, 4, 5, 6, 7, 139, 312, 313, 314, 329, 334, 335, 344, 351, 456, 458, 464, 465], "randomli": [4, 5, 318, 319, 320], "rang": [0, 2, 3, 4, 5, 6, 8, 18, 155, 159, 184, 381, 383, 389, 390, 431, 445, 446, 447, 448, 449, 453, 456, 458, 460, 464], "rank": [0, 121, 122, 123, 407, 457], "rate": [4, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444], "rather": [2, 458, 464], "ratio": [0, 24], "rceil": 89, "re": [6, 8, 426], "readabl": 3, "readi": 2, "real": [149, 150, 151, 152, 153, 154, 177, 178], "realli": 331, "reason": [1, 5, 459], "reboot": 8, "receiv": [121, 122, 293, 447, 461], "reciproc": [0, 247], "reclaim": 207, "recommend": [8, 208, 438], "recompil": [93, 456], "record": [3, 204, 460], "recreat": [300, 431], "rectifi": [332, 363, 364, 382, 383, 395, 414, 415], "recurr": [324, 330, 362], "recurs": [310, 341, 342, 347, 352, 354, 429], "recv": 122, "redirect": 2, "reduc": [0, 1, 8, 15, 17, 26, 27, 118, 194, 196, 198, 211, 225, 266, 270, 286, 299, 314, 377, 406], "reduct": [15, 17, 118, 194, 196, 211, 225, 299, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 457], "redund": 458, "refer": [180, 329, 336, 350, 380, 381, 382, 383, 390, 412, 459], "reflect": [350, 456, 459, 461], "regard": 322, "regardless": [82, 142], "regist": [2, 6], "register_librari": 2, "regress": [7, 406], "regular": [38, 319, 412, 436, 456, 459], "regularli": 2, "reimplement": 2, "rel": [16, 167, 433, 456], "relative_step": 433, "relax": 208, "relev": 2, "reli": [1, 2], "relu": [310, 358, 377, 413, 426], "relu6": 310, "remain": [0, 5, 285, 298, 318, 319, 320, 457], "remaind": [0, 125], "remov": [0, 114, 195, 230, 264, 400], "rep": [0, 278], "repeat": [0, 278], "repeatedli": 4, "repetit": 243, "replac": [0, 5, 215, 355, 356, 377, 410], "replai": 3, "repli": 5, "repo": [4, 6, 8, 456], "report": [202, 208], "repres": [2, 5, 116, 119, 160, 407, 411, 461], "represent": [5, 226, 287, 296, 300], "request": 2, "requir": [1, 2, 5, 310, 457, 460, 461], "requires_grad": 458, "rerun": [456, 460], "rescal": 295, "research": 7, "reset": 206, "reset_peak_memori": 204, "reshap": [0, 5, 180, 378, 459], "resolv": 2, "resourc": 2, "respect": [2, 4, 6, 138, 140, 159, 160, 161, 226, 285, 297, 310, 314, 322, 325, 329, 331, 429, 458, 462], "respons": 2, "rest": [5, 141, 297, 298, 365], "restart": 8, "result": [0, 5, 14, 18, 38, 77, 82, 93, 138, 140, 160, 180, 195, 227, 234, 243, 265, 297, 298, 299, 369, 398, 456, 458, 461], "resum": 5, "return": [0, 1, 2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 50, 68, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 310, 324, 330, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 351, 352, 354, 355, 356, 362, 379, 380, 381, 382, 383, 384, 385, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 426, 429, 439, 455, 456, 457, 458, 459, 460, 461, 463, 464], "return_metadata": 185, "revers": [0, 2, 41, 42, 43, 44, 82, 104, 105, 106, 107, 281, 369], "rf": 8, "rfft": 149, "rfft2": 150, "rfftn": 151, "rfloor": [312, 313, 334, 335], "rho": 432, "rhs_indic": [0, 159, 160], "rhs_mask": 89, "right": [0, 1, 2, 8, 226, 245, 312, 313, 322, 334, 335, 378, 389, 390, 401, 403, 411], "right_shift": 0, "rm": [5, 8, 140, 433], "rmsnorm": [5, 310], "rmsprop": 431, "rnn": [310, 324], "roadcast": 236, "robust": 406, "roform": [5, 365], "root": [0, 5, 140, 247, 262, 361], "rope": [5, 310], "rosetta": 8, "rotari": [5, 141, 365], "rotat": [141, 365], "round": [0, 226], "routin": 2, "row": [0, 1, 2, 82, 136, 139, 165, 226, 282], "row_contigu": 2, "rpath": 2, "rsqrt": 0, "rtol": [0, 16, 167], "rule": [2, 431], "run": [1, 2, 3, 5, 6, 7, 8, 9, 139, 221, 301, 314, 337, 432, 433, 435, 436, 437, 456, 457, 460, 464, 465], "runtim": [5, 119, 305, 456, 457], "runtime_error": 2, "safetensor": [8, 185, 250, 344, 348, 431, 460, 463], "sai": [2, 5, 426, 460], "said": 5, "sake": 458, "same": [0, 2, 5, 8, 16, 38, 81, 90, 93, 98, 99, 100, 101, 117, 138, 140, 149, 152, 153, 154, 160, 161, 167, 173, 222, 230, 246, 287, 288, 290, 298, 310, 313, 314, 318, 325, 329, 335, 359, 379, 380, 381, 382, 383, 384, 385, 386, 400, 411, 429, 439, 453, 456, 457, 459, 464], "sampl": [2, 4, 5, 184, 229, 230, 231, 233, 234, 236, 239, 240, 380, 381, 382, 383, 385, 386, 401, 407, 411, 453, 456], "sat": 5, "save": [3, 5, 7, 185, 209, 226, 249, 250, 251, 252, 348, 460], "save_gguf": 463, "save_safetensor": [348, 431, 463], "save_weight": 310, "savez": [5, 348, 463], "savez_compress": 463, "saw": [5, 458], "scalar": [0, 2, 13, 14, 16, 30, 50, 77, 81, 86, 87, 88, 89, 90, 92, 124, 125, 129, 157, 158, 161, 162, 163, 164, 167, 174, 175, 176, 184, 190, 191, 192, 193, 195, 197, 212, 214, 215, 218, 222, 224, 229, 236, 239, 240, 242, 245, 249, 269, 285, 287, 290, 294, 411, 458, 460, 462], "scale": [0, 2, 5, 14, 112, 137, 138, 140, 141, 142, 160, 164, 226, 227, 233, 235, 295, 319, 320, 331, 357, 365, 366, 369, 378, 416, 433], "scale_arr": 2, "scale_factor": 378, "scale_paramet": 433, "scatter": 0, "scatter_add": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 208, 431, 445, 446, 447, 448, 449, 451, 464], "schema": 3, "scipi": 164, "scope": 310, "score": [5, 142, 407], "sdk": 8, "se": 1, "second": [5, 8, 114, 172, 174, 191, 193, 195, 245, 271, 280, 285, 313, 335, 399, 407, 433, 435, 436, 437, 458, 464], "second_layer_a": 460, "second_layer_b": 460, "secret": 5, "section": [1, 5, 8, 261, 411, 456, 457, 458], "see": [1, 2, 5, 6, 8, 10, 11, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 180, 207, 249, 250, 293, 303, 310, 314, 319, 322, 326, 327, 328, 340, 358, 359, 360, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 388, 389, 390, 416, 456, 457, 458, 459, 462, 464], "seed": 232, "seen": 461, "select": [0, 3, 8, 279, 290, 337, 341, 349], "self": [5, 6, 9, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 108, 139, 301, 310, 412, 429], "selu": 310, "semant": [13, 86, 87, 88, 90, 124, 125, 129, 162, 163, 174, 175, 176, 190, 195, 197, 212, 214, 218, 224, 242, 245, 269, 464], "semi": [177, 178, 234], "send": 457, "sennrich": 5, "sensit": 406, "sentencepiec": 5, "separ": [5, 65, 78, 325, 407], "sequenc": [5, 15, 17, 33, 34, 56, 57, 58, 59, 63, 71, 74, 75, 79, 82, 90, 100, 121, 134, 144, 145, 147, 148, 150, 151, 153, 154, 158, 194, 196, 198, 211, 219, 225, 229, 230, 231, 233, 234, 235, 236, 239, 240, 244, 259, 261, 264, 266, 270, 277, 278, 281, 286, 291, 314, 315, 324, 330, 362, 377, 453, 464], "sequenti": [310, 426], "seri": 8, "serial": 431, "set": [2, 5, 6, 8, 93, 108, 115, 117, 118, 119, 121, 122, 123, 128, 138, 141, 201, 207, 208, 253, 254, 268, 322, 331, 333, 340, 342, 349, 350, 351, 354, 355, 360, 365, 375, 399, 411, 423, 429, 431, 433, 440, 453, 458, 460], "set_data": 2, "set_default_devic": 2, "set_dtyp": 310, "set_input_arrai": 2, "set_memory_limit": 207, "set_output_arrai": 2, "setbyt": 2, "setcomputepipelinest": 2, "setup": [2, 4, 6, 8, 456], "sever": [5, 8, 97, 98, 99, 100, 251, 252, 456, 463], "sgd": [4, 6, 431, 438, 440, 445, 446, 449, 456], "shade": [1, 2], "shall": 5, "shape": [0, 2, 3, 5, 6, 65, 81, 82, 89, 90, 93, 97, 98, 99, 100, 114, 117, 121, 122, 139, 142, 143, 146, 149, 152, 153, 154, 158, 159, 164, 173, 179, 183, 195, 219, 220, 229, 230, 231, 233, 234, 235, 236, 239, 240, 244, 274, 287, 288, 290, 291, 292, 310, 312, 313, 314, 315, 316, 317, 319, 320, 324, 329, 330, 333, 334, 335, 344, 362, 379, 380, 381, 382, 383, 384, 385, 386, 400, 411, 431, 456, 458, 459, 462, 464], "shapeless": [0, 93], "share": [7, 112, 137, 160, 226, 227, 287, 457], "shazeer": 5, "shift": [0, 174, 245, 314], "shop": 5, "should": [2, 4, 5, 6, 8, 82, 114, 117, 138, 139, 140, 142, 173, 200, 209, 226, 274, 280, 285, 288, 293, 296, 310, 315, 316, 317, 319, 320, 351, 357, 367, 400, 402, 407, 429, 455, 456, 457, 458, 460, 461, 465], "show": [8, 303, 456], "shown": 2, "shuffl": 6, "side": [222, 312, 313, 334, 335, 456], "sigma": [322, 323, 324, 330, 380, 381, 382, 383, 390, 391, 396, 417, 418], "sigmoid": [0, 5, 310, 368, 390, 396, 398, 418], "sign": [0, 16, 167, 303, 438], "signal": [101, 378], "signatur": [1, 139], "signedinteg": [11, 172], "signific": 226, "silent": [152, 153, 154], "silicon": [2, 5, 7, 8, 464], "silu": 310, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [5, 160, 172, 297, 355, 356, 357, 399, 461, 463], "similarli": [2, 8, 195, 458, 460], "simpl": [2, 5, 6, 310, 321, 425, 431, 456, 457, 458, 460], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 310, 457], "simpli": [2, 5, 8, 332, 363, 387, 395, 414, 424, 429, 456, 457, 458], "simplic": 0, "simultan": 1, "sin": [0, 108, 369, 458, 462], "sinc": [1, 2, 5, 6, 160, 204, 429, 438, 447, 461, 464], "sine": [0, 21, 22, 257, 258, 458], "sing": 180, "singer": 434, "singl": [2, 6, 132, 173, 185, 199, 222, 288, 313, 335, 456, 459, 463], "singleton": [0, 15, 17, 26, 27, 119, 194, 195, 196, 198, 211, 225, 266, 270, 286], "singular": [180, 182], "sinh": 0, "sinusoid": 369, "sinusoidalpositionalencod": 310, "size": [0, 1, 2, 5, 6, 51, 68, 89, 98, 99, 112, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 160, 164, 165, 172, 180, 203, 208, 226, 227, 230, 244, 261, 264, 287, 293, 310, 312, 313, 315, 316, 317, 321, 329, 334, 335, 359, 360, 378, 433, 457, 460, 461], "size_t": [0, 2], "sizeof": 2, "skip": [3, 82], "slice": [0, 459], "slice_s": 0, "slice_upd": 0, "slight": [5, 460], "slightli": [365, 464], "slope": 332, "slot": 457, "slow": 456, "slowli": 5, "small": [5, 135, 138, 140, 314, 325, 331, 361, 401, 406, 411, 456, 457, 464], "smaller": [0, 8, 223, 438, 456], "smallest": 180, "smile": 5, "smooth": [400, 410, 443], "smooth_l1_loss": 310, "sned": 123, "snippet": 457, "so": [1, 2, 5, 8, 161, 164, 285, 318, 378, 431, 456, 457, 460, 464], "softmax": [0, 5, 142, 310, 397, 400], "softmin": 310, "softplu": [310, 336, 412], "softshrink": 310, "softsign": 310, "solv": 310, "some": [0, 2, 4, 5, 6, 342, 354, 431, 440, 456, 458, 460], "someon": 5, "someth": [4, 5, 459], "sonoma": 8, "soon": 5, "sort": [0, 28, 29, 223, 279], "sourc": [0, 1, 2, 3, 60, 121, 122, 139, 213, 281, 457], "space": [0, 2, 184, 398, 409], "spars": [0, 199], "spatial": [98, 99, 100, 312, 325, 334, 378], "speak": [5, 180], "special": 2, "specif": [1, 2, 8, 457, 458], "specifi": [0, 2, 18, 37, 98, 99, 100, 114, 150, 151, 158, 161, 180, 184, 213, 219, 230, 243, 271, 273, 274, 277, 280, 281, 285, 289, 291, 314, 375, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 423, 457, 458, 464], "speed": [1, 2], "spent": 5, "split": [0, 323, 325, 391], "splittabl": 453, "sqrt": [0, 5, 130, 142, 164, 314, 322, 325, 329, 331, 333, 361, 369, 380, 381, 382, 383, 389, 432, 434, 435, 436, 443, 456], "squar": [0, 4, 5, 140, 165, 179, 183, 247, 262, 285, 297, 310, 361, 408, 410, 432, 433, 435, 436, 437, 458, 461], "squeez": [0, 378, 456], "src": [0, 121, 122], "ssh": 457, "stabil": [138, 140, 314, 325, 329, 331, 361, 398, 399, 401, 432, 433, 434, 435, 436, 437, 443], "stabl": [190, 194, 259, 406], "stable_abi": 2, "stack": [0, 456], "standard": [0, 1, 6, 50, 77, 195, 231, 235, 266, 377, 380, 382, 385, 457, 462], "starmap": [5, 297], "start": [0, 1, 2, 4, 5, 7, 8, 11, 18, 141, 184, 209, 261, 299, 456, 459, 464], "start_axi": [0, 49, 155], "start_captur": 3, "state": [5, 6, 310, 324, 330, 362, 431, 440, 453, 456], "static": 8, "static_cast": 2, "std": [0, 2, 385], "step": [0, 3, 5, 6, 18, 310, 324, 330, 362, 433, 440, 445, 447, 448, 449, 456, 457], "step_decai": 431, "step_siz": 449, "still": [5, 8, 180, 456, 460], "stochast": [434, 435, 437, 444, 460], "stood": 5, "stop": [0, 2, 5, 18, 184, 210, 267, 458, 459], "stop_captur": 3, "stop_gradi": [0, 458], "storag": 82, "store": 5, "str": [2, 101, 126, 127, 139, 161, 180, 185, 199, 201, 209, 248, 249, 250, 251, 252, 285, 296, 300, 337, 338, 341, 342, 344, 346, 348, 354, 378, 382, 383, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "straight": 5, "strang": 5, "stream": [2, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 290, 291, 292, 457, 464], "streamcontext": 268, "streamordevic": [0, 2], "street": 5, "strength": [438, 444], "strict": [119, 162, 175, 342, 344, 354], "strictli": 180, "stride": [0, 2, 82, 97, 98, 99, 100, 312, 313, 315, 316, 317, 334, 335, 365, 459], "string": [0, 2, 127, 139, 201, 222, 461, 463], "structur": [2, 439, 458], "stub": 8, "style": [2, 13, 16, 86, 87, 88, 124, 125, 129, 162, 163, 167, 174, 175, 176, 190, 195, 197, 212, 214, 218, 224, 242, 245, 269], "su": 5, "sub": [0, 6, 114, 238, 280, 293], "subarrai": [114, 261], "subclass": 429, "subdtyp": 172, "subgradi": 434, "sublinear": 433, "submodul": [5, 6, 310, 338, 342, 343, 354, 356], "subscript": [126, 127], "subsect": 5, "subsequ": 431, "subset": [310, 341], "substanti": 8, "subtract": [0, 38], "subtyp": [172, 303], "sudo": 8, "sum": [0, 2, 4, 13, 107, 118, 166, 180, 194, 259, 277, 280, 310, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 457, 459, 461], "sum_": [180, 312, 313, 406], "sum_i": 397, "sum_j": [419, 420], "summat": [126, 127], "super": [5, 6, 310, 429], "superset": [297, 439], "support": [1, 2, 5, 7, 8, 16, 89, 99, 142, 155, 164, 167, 177, 178, 179, 181, 182, 183, 185, 195, 226, 234, 457, 458, 459, 461, 463], "suppos": [458, 464], "sure": [2, 3, 5, 8, 310, 456], "surpass": [382, 383], "surpris": 5, "sw": 1, "swap": [0, 101, 208, 271, 356], "swapax": [0, 108], "swiglu": 5, "swish": [368, 418], "switch": 8, "symbol": 438, "symmetr": [98, 99, 177, 178], "synchron": [2, 456], "syntax": [38, 459], "synthet": 4, "system": [5, 8, 201, 202, 203], "t": [0, 1, 2, 5, 8, 130, 139, 142, 160, 177, 178, 227, 285, 310, 312, 324, 330, 334, 362, 432, 433, 434, 435, 436, 437, 438, 443, 444, 456, 458, 464], "tabl": [1, 180, 303, 321], "take": [0, 2, 5, 6, 86, 87, 88, 93, 159, 161, 173, 197, 212, 220, 227, 274, 285, 288, 289, 292, 298, 299, 357, 398, 453, 457, 458, 459, 463, 464, 465], "take_along_axi": [0, 459], "taken": [114, 273, 280], "talk": 457, "tan": 0, "tangent": [0, 2, 23, 24, 25, 108, 173, 275, 276, 376, 424], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 310, 322, 324, 330, 336, 362, 389, 412], "target": [2, 285, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 456], "target_include_directori": 2, "target_link_librari": 2, "target_link_opt": 2, "target_sourc": 2, "task": [208, 406], "tau": 444, "tcp": 457, "tell": [5, 456, 461], "temp": 5, "templat": [0, 1, 2, 139], "ten": [458, 460], "tend": 438, "tensor": [185, 277, 312, 313, 334, 335, 411, 461], "tensordot": 0, "term": [2, 401, 432, 433, 434, 435, 436, 437, 443], "termin": 8, "test": [6, 8, 457], "test_imag": 6, "test_label": 6, "text": [5, 312, 313, 322, 324, 330, 334, 335, 336, 362, 375, 380, 381, 382, 383, 389, 392, 393, 394, 401, 402, 403, 406, 407, 410, 412, 413, 416, 417, 422, 423, 433, 438], "textrm": [226, 322, 323, 388, 391], "tf": 461, "tgp_size": 2, "th": [104, 105, 106, 107, 113, 136, 447], "than": [1, 2, 5, 77, 101, 114, 125, 141, 159, 162, 163, 175, 176, 177, 178, 179, 182, 183, 195, 207, 295, 297, 365, 375, 378, 407, 410, 423, 433, 438, 456, 458, 464], "thank": 460, "thei": [1, 2, 4, 5, 8, 16, 101, 160, 167, 367, 402, 429, 438, 455, 456, 457, 460, 462, 463, 464], "them": [2, 5, 117, 310, 342, 354, 457, 464], "themselv": [2, 456], "thi": [0, 1, 2, 5, 6, 8, 15, 16, 17, 18, 26, 27, 28, 29, 82, 108, 128, 139, 159, 160, 164, 167, 173, 177, 178, 179, 180, 181, 182, 183, 190, 194, 195, 196, 198, 200, 202, 211, 223, 225, 230, 254, 259, 260, 261, 266, 270, 273, 279, 286, 295, 298, 299, 310, 318, 319, 320, 323, 324, 330, 338, 339, 341, 342, 345, 346, 347, 352, 354, 355, 356, 357, 360, 362, 375, 380, 381, 382, 383, 389, 390, 391, 398, 406, 423, 429, 440, 455, 456, 457, 458, 460, 461, 463], "thing": [2, 5, 457], "thompson": 319, "those": [2, 5, 310], "though": [2, 5, 456, 460, 461], "thousand": 460, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 139], "threadgroup": [1, 2, 139], "threads_per_simdgroup": 1, "three": [5, 85, 378], "threefri": 453, "threshold": [375, 403, 410, 423], "through": [1, 2, 267, 377, 438, 456, 458, 461], "throw": [2, 93, 119], "thu": [5, 310], "thumb": 431, "tic": 456, "tieleman": 443, "tile": [0, 142], "time": [2, 5, 8, 208, 278, 310, 312, 313, 324, 330, 334, 335, 362, 456, 458, 460, 464], "timeit": [456, 458], "titl": 2, "tmp": [1, 139], "to_quant": 293, "to_stream": 2, "toc": 456, "togeth": [0, 1, 2, 6, 226, 297, 298, 457], "tok_embed": 5, "token": [5, 321, 359], "told": 5, "toler": [0, 16, 167], "too": [172, 456, 460], "took": 5, "tool": 8, "top": [2, 279, 333, 378], "topk": 0, "torch": [5, 461], "torch_weight": 5, "total": 458, "total_norm": 295, "tpi": 456, "trace": [0, 3, 456], "trace_fil": 3, "tracer": 355, "track": [2, 310, 314], "track_running_stat": 314, "trade": 460, "tradit": [5, 141, 319, 320, 365], "train": [5, 6, 310, 314, 318, 319, 320, 340, 342, 354, 380, 381], "train_imag": [6, 431], "train_label": [6, 431], "trainabl": [6, 294, 310, 429], "trainable_paramet": [310, 341, 440], "transform": [1, 5, 7, 108, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 164, 294, 310, 314, 325, 331, 333, 341, 342, 354, 360, 365, 459], "transformerencod": 251, "transit": 447, "translat": [138, 331], "transpos": [0, 5, 31, 160, 227], "treat": [0, 2, 150, 151, 153, 154, 273, 378, 456], "tree": [7, 93, 132, 161, 285, 289, 296, 297, 298, 299, 300, 439, 440, 442, 451, 458], "tree_flatten": [251, 297, 300, 310, 431], "tree_map": [298, 310, 457], "tree_unflatten": [5, 431], "trembl": 5, "tri": 0, "triangl": 282, "triangular": [177, 178, 183], "tril": 0, "trilinear": 378, "triplet": 411, "triplet_loss": 310, "triu": 0, "true": [0, 1, 2, 4, 5, 16, 41, 42, 43, 44, 81, 93, 104, 105, 106, 107, 139, 141, 160, 167, 172, 177, 178, 180, 185, 199, 208, 227, 259, 290, 293, 296, 297, 298, 299, 303, 310, 314, 315, 316, 317, 324, 325, 329, 330, 331, 333, 341, 342, 344, 351, 354, 360, 362, 365, 369, 377, 378, 398, 406, 433], "truncat": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 239], "truth": [4, 400, 410], "try": [2, 8], "tupl": [0, 30, 65, 68, 78, 94, 98, 99, 100, 121, 125, 127, 132, 134, 173, 180, 181, 182, 222, 226, 244, 264, 285, 288, 296, 297, 298, 299, 300, 312, 313, 316, 317, 334, 335, 344, 346, 367, 378, 433, 435, 436, 437, 438, 455, 458], "tutori": 2, "twice": 464, "two": [0, 2, 13, 14, 16, 24, 81, 84, 86, 87, 88, 89, 114, 124, 129, 144, 147, 153, 159, 160, 162, 163, 167, 175, 176, 177, 178, 179, 181, 182, 183, 190, 195, 197, 212, 214, 218, 221, 271, 299, 313, 323, 330, 335, 391, 399, 456, 457, 458, 459, 464], "txt": 2, "type": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 68, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 299, 310, 349, 377, 379, 380, 381, 382, 383, 384, 385, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 456, 459], "type_nam": 2, "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 142, 321, 431, 456, 460], "u": [1, 2, 177, 182, 333, 356, 451, 460], "u_": 432, "u_t": 432, "uint": [1, 2, 139], "uint16": [11, 303], "uint3": 1, "uint32": [11, 26, 27, 28, 29, 230, 303], "uint64": [11, 303], "uint8": [11, 303], "ultra": 5, "unabl": 8, "unam": 8, "unari": 456, "unchang": [141, 267, 365], "uncheck": 8, "uncompress": 251, "undefin": [0, 28, 108, 177, 178, 223, 234, 459], "under": [2, 180], "underli": [2, 287], "understand": [5, 380, 381], "unexpect": [2, 18], "unfreez": [310, 342], "unfrozen": 354, "unifi": 7, "uniform": [3, 310, 333, 344, 381, 383, 426, 453, 456, 458, 464], "uniformli": 240, "unintend": 0, "union": [83, 84, 85, 170, 171, 172, 249], "uniqu": [2, 453], "unique_ptr": 2, "unit": [322, 323, 324, 332, 363, 364, 366, 368, 380, 381, 382, 383, 387, 388, 389, 390, 391, 395, 414, 415, 416, 418], "unittest": 8, "univers": 180, "unless": [5, 16, 167, 180, 429], "unlik": [5, 16, 167, 319, 320, 350], "unnecessari": [2, 5], "unnorm": [230, 398, 400], "unscal": 433, "unsign": [160, 226, 227, 303], "unsignedinteg": 11, "unspecifi": [15, 17, 18, 26, 27, 28, 29, 94, 104, 105, 106, 107, 158, 194, 196, 198, 211, 219, 223, 225, 243, 259, 260, 266, 270, 273, 279, 280, 286, 291, 465], "unsqueez": 5, "unsupport": 185, "until": [2, 460, 462], "unus": 2, "up": [1, 2, 5, 108, 456], "upcast": 2, "updat": [0, 1, 2, 4, 5, 6, 38, 93, 293, 297, 299, 314, 337, 338, 344, 349, 350, 351, 356, 431, 433, 436, 438, 439, 440, 444, 445, 446, 447, 448, 449, 456, 457, 460], "update_modul": 310, "upon": [5, 297, 298], "upper": [177, 178, 183, 226, 236, 239, 240, 386], "upsampl": 310, "us": [0, 3, 4, 5, 6, 7, 8, 18, 38, 82, 108, 112, 115, 117, 118, 121, 122, 123, 125, 137, 139, 141, 155, 160, 174, 177, 178, 179, 180, 181, 182, 183, 195, 202, 203, 204, 207, 226, 227, 243, 244, 245, 272, 296, 299, 303, 305, 310, 313, 319, 321, 322, 324, 330, 333, 335, 337, 341, 348, 355, 357, 359, 360, 362, 365, 369, 377, 378, 382, 383, 389, 390, 399, 426, 429, 431, 432, 433, 435, 436, 437, 438, 439, 440, 453, 455, 456, 457, 458, 459, 462, 464], "usag": [108, 377, 456], "user": [2, 5, 310], "usual": [321, 359, 455, 460], "util": [1, 2, 5, 7, 8, 251, 310, 431, 457], "v": [5, 101, 142, 310, 342, 461], "v_": [432, 434, 435, 436, 437, 443, 444], "v_t": [432, 434, 435, 436, 437, 443, 444], "val": [0, 30, 158], "valid": [6, 101, 155, 289, 296, 342, 354, 455], "valid_parameter_filt": 337, "valu": [0, 1, 4, 5, 11, 12, 16, 18, 26, 27, 50, 77, 81, 92, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 167, 180, 182, 184, 201, 215, 222, 229, 230, 231, 233, 234, 235, 236, 239, 240, 249, 273, 274, 285, 289, 294, 296, 297, 298, 299, 303, 313, 318, 319, 320, 326, 329, 333, 335, 341, 357, 358, 373, 375, 377, 379, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 423, 429, 433, 436, 445, 446, 448, 449, 458], "value_and_grad": [6, 108, 310, 355, 429, 431, 442, 456, 458, 461, 462], "value_and_grad_fn": 460, "value_cach": 5, "value_dim": 357, "value_input_dim": 357, "value_output_dim": 357, "value_proj": 5, "valueerror": [180, 344, 458], "values_hat": 5, "van": 180, "var": [0, 314, 325, 329, 331, 401], "variabl": [8, 93, 115, 128, 161, 173, 285, 288, 289, 457], "varianc": [0, 266, 286, 314, 325, 401], "variant": [5, 410, 437], "variou": 180, "vector": [0, 2, 4, 7, 166, 173, 180, 273, 288, 289, 321, 400, 462], "verbos": [1, 139], "veri": [5, 357, 457, 460, 464], "verifi": [4, 8], "version": [2, 8, 112, 137, 190, 194, 226, 259, 289, 453, 458, 459], "versu": 456, "via": [8, 108, 439, 442, 457, 460, 461], "video": 320, "view": [0, 3, 82, 461], "virtual": 2, "vjp": [2, 108, 462], "vmap": [2, 108, 458, 460, 462], "vmap_add": 458, "vocab_s": 5, "vocabulari": [321, 359], "void": [1, 2], "vt": 182, "w": [0, 1, 4, 98, 99, 112, 137, 160, 226, 227, 285, 298, 313, 314, 316, 317, 319, 320, 333, 335, 431, 444, 458], "w1": [5, 295], "w2": [5, 295], "w3": 5, "w_": [313, 324, 330, 335, 362, 432, 433, 434, 435, 436, 437, 438, 443, 444], "w_1": 226, "w_g": 226, "w_i": [112, 137, 226], "w_in": 1, "w_q": 226, "w_star": 4, "w_stride": 1, "w_t": [432, 434, 435, 436, 437, 438, 443, 444], "wa": [5, 82, 121, 122, 457, 460], "wai": [2, 5, 8, 310, 378, 456, 457, 458, 459], "wait": [2, 5, 208], "walk": 5, "walkthrough": 2, "walsh": 164, "want": [1, 5, 457, 458, 464], "warm": [2, 456], "warmup": [447, 448], "warmup_init": 433, "watch": [5, 456], "wd": 438, "we": [0, 1, 2, 4, 5, 6, 112, 121, 122, 137, 160, 226, 227, 310, 321, 359, 367, 436, 438, 453, 455, 456, 457, 458, 460, 464], "weight": [0, 4, 97, 98, 99, 100, 138, 140, 297, 310, 344, 348, 359, 360, 398, 400, 429, 433, 436, 438, 440, 444, 458, 460], "weight_decai": [433, 436, 438, 444], "weight_fil": 5, "weights_fp16": 460, "well": [5, 310, 342, 354, 357, 460], "wen": 5, "went": 5, "were": [5, 464], "wet": 5, "what": [2, 5, 297], "whatsoev": 5, "whc": 319, "when": [0, 1, 2, 5, 7, 8, 93, 100, 108, 123, 139, 177, 178, 179, 180, 182, 183, 185, 315, 316, 317, 378, 382, 383, 398, 404, 410, 429, 431, 447, 453, 456, 457, 464], "where": [0, 6, 136, 167, 178, 226, 285, 289, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 324, 325, 329, 330, 331, 333, 334, 335, 341, 358, 361, 362, 375, 382, 383, 387, 388, 390, 401, 407, 413, 416, 418, 423, 440, 457, 458, 459], "wherea": 458, "whether": [139, 160, 183, 227, 324, 330, 341, 357, 362, 398, 401, 407], "which": [0, 1, 2, 5, 6, 7, 8, 18, 37, 82, 93, 100, 114, 117, 118, 121, 122, 123, 132, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 168, 169, 170, 171, 173, 177, 178, 179, 180, 181, 182, 183, 185, 199, 209, 226, 230, 231, 243, 244, 248, 249, 250, 251, 252, 264, 265, 273, 280, 285, 288, 289, 293, 313, 319, 320, 322, 335, 337, 341, 365, 398, 400, 403, 407, 410, 426, 439, 440, 453, 456, 457, 458, 459, 460, 464, 465], "while": [2, 3, 5, 8, 244, 365, 460, 461], "whistl": 2, "who": 5, "whose": [136, 293, 294], "why": 5, "wide": 460, "width": [313, 314, 316, 317, 319, 320, 335, 359, 360], "window": [8, 312, 313, 334, 335], "wipe": 8, "wise": [0, 2, 12, 13, 19, 20, 21, 22, 23, 24, 25, 86, 87, 88, 91, 102, 103, 124, 125, 129, 130, 131, 133, 135, 156, 157, 162, 163, 167, 174, 175, 176, 186, 187, 188, 189, 190, 191, 192, 193, 197, 212, 214, 216, 218, 224, 241, 242, 245, 247, 255, 256, 257, 258, 262, 263, 269, 275, 276, 319, 320, 328, 336, 358, 393, 394, 396, 397, 412, 413, 415, 418, 419, 420, 421, 456], "wish": 8, "with_logit": 398, "within": [0, 3, 28, 167], "without": [1, 5, 7, 267, 357, 425, 455, 456, 457, 460, 461, 464], "wk": 5, "wl": 2, "wo": 5, "won": 456, "word": 0, "work": [2, 3, 5, 208, 456, 457, 458, 459, 460], "workhors": 310, "world": [300, 457], "worri": [1, 460], "would": [2, 5, 378, 457, 459, 460, 461, 464], "wq": 5, "wrap": [108, 310], "write": [0, 1, 2, 5, 310, 461], "written": 2, "wrt": 294, "wv": 5, "x": [0, 1, 2, 4, 5, 6, 38, 89, 108, 117, 118, 122, 123, 130, 135, 138, 139, 140, 160, 164, 165, 180, 227, 231, 246, 251, 255, 283, 284, 290, 297, 299, 310, 312, 313, 314, 322, 323, 325, 329, 331, 332, 333, 334, 335, 336, 337, 358, 361, 363, 369, 375, 378, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 429, 431, 438, 456, 457, 458, 459, 460, 461, 462, 464], "x1": 399, "x2": 399, "x86_64": 8, "x_1": [399, 407], "x_2": [399, 407], "x_cast": 2, "x_grad": 1, "x_i": [397, 419, 420], "x_j": [419, 420], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [324, 330, 362], "x_view": 461, "xcode": 8, "xcodeproj": 3, "xcrun": 8, "xf": 330, "xg": 330, "xi": 330, "xn": 324, "xo": 330, "xor": 88, "xr": 324, "xy": [0, 199], "xz": 324, "x\u00b2": 461, "y": [0, 2, 4, 5, 6, 38, 108, 164, 290, 310, 314, 319, 325, 329, 331, 333, 361, 402, 407, 410, 431, 434, 456, 457, 458, 460, 461], "y_": [402, 406], "y_cast": 2, "y_hat": 310, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 5, "year": 5, "yet": [5, 180, 310, 429, 440, 458, 459, 460, 462], "yield": [5, 6, 453], "you": [2, 3, 5, 6, 7, 8, 139, 310, 369, 377, 426, 453, 456, 457, 458, 459, 461, 463, 464], "your": [2, 5, 8, 429, 458, 460], "z": [2, 324, 456, 460], "z_t": 324, "zeiler": 432, "zero": [0, 136, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 199, 206, 282, 283, 284, 292, 310, 312, 313, 318, 319, 320, 344, 379, 380, 381, 382, 383, 384, 385, 386, 426, 431, 433, 459], "zero_grad": 458, "zeros_lik": 0, "zhang": 5, "zip": [5, 6], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.eye", "mlx.core.fast.affine_quantize", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.BatchNorm", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 464, "In": 459, "The": 310, "ab": [12, 32], "adadelta": 432, "adafactor": 433, "adagrad": 434, "adam": 435, "adamax": 437, "adamw": 436, "add": 13, "addmm": 14, "affine_quant": 137, "algebra": 308, "alibi": 311, "all": [5, 15, 33, 457], "all_gath": 117, "all_sum": 118, "allclos": 16, "ani": [17, 34], "api": [7, 8], "appli": 337, "apply_gradi": 439, "apply_to_modul": 338, "arang": 18, "arcco": 19, "arccosh": 20, "arcsin": 21, "arcsinh": 22, "arctan": 23, "arctan2": 24, "arctanh": 25, "argmax": [26, 35], "argmin": [27, 36], "argpartit": 28, "argsort": 29, "arrai": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 302, 459, 463], "array_equ": 81, "as_strid": 82, "astyp": 37, "atleast_1d": 83, "atleast_2d": 84, "atleast_3d": 85, "attent": 5, "automat": 458, "avgpool1d": 312, "avgpool2d": 313, "back": 2, "basic": [456, 462], "batchnorm": 314, "benchmark": 5, "bernoulli": 229, "binari": 8, "binary_cross_entropi": 398, "bind": 2, "bitwise_and": 86, "bitwise_or": 87, "bitwise_xor": 88, "block_masked_mm": 89, "broadcast_to": 90, "build": [2, 8], "c": [7, 8], "categor": 230, "ceil": 91, "children": 339, "choleski": 177, "cholesky_inv": 178, "class": 310, "clear_cach": 200, "clip": 92, "clip_grad_norm": 295, "cmake": 2, "co": [40, 102], "code": [2, 5], "common": 450, "commun": [305, 457], "compil": [93, 456], "complex": 1, "comput": 460, "concaten": 94, "conj": [39, 95], "conjug": 96, "constant": 379, "conv1d": [97, 315], "conv2d": [98, 316], "conv3d": [99, 317], "conv_gener": 100, "convers": 461, "convert": 5, "convolv": 101, "core": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 301], "cosh": 103, "cosine_decai": 445, "cosine_similarity_loss": 399, "cpu": 2, "cross_entropi": 400, "cummax": [41, 104], "cummin": [42, 105], "cumprod": [43, 106], "cumsum": [44, 107], "custom": [1, 2], "custom_funct": 108, "data": 303, "debug": 456, "debugg": 3, "default_devic": 109, "default_stream": 110, "degre": 111, "dequant": 112, "devic": [9, 304], "device_info": 201, "diag": [45, 113], "diagon": [46, 114], "differ": 459, "differenti": 458, "disable_compil": 115, "distribut": [116, 117, 118, 119, 120, 121, 122, 123, 305, 457], "divid": 124, "divmod": 125, "download": [2, 5], "dropout": 318, "dropout2d": 319, "dropout3d": 320, "dtype": [10, 47], "dtypecategori": 11, "einsum": 126, "einsum_path": 127, "elu": 387, "embed": 321, "enable_compil": 128, "encod": 5, "end": 2, "equal": 129, "erf": 130, "erfinv": 131, "eval": [132, 340], "evalu": 460, "exampl": [1, 2, 7, 456, 457, 464], "exp": [48, 133], "expand_dim": 134, "expm1": 135, "exponential_decai": 446, "extens": 2, "ey": 136, "fast": [137, 138, 139, 140, 141, 142, 306], "fft": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 307], "fft2": 144, "fftn": 145, "filter_and_map": 341, "flatten": [49, 155], "floor": 156, "floor_divid": 157, "format": 463, "found": 8, "framework": 461, "freez": 342, "from": [8, 459], "full": [5, 158], "function": [425, 428, 456, 458, 462], "further": 7, "gather_mm": 159, "gather_qmm": 160, "gaussian_nll_loss": 401, "gelu": [322, 388], "gelu_approx": 389, "gelu_fast_approx": 390, "gener": 5, "get": 457, "get_active_memori": 202, "get_cache_memori": 203, "get_peak_memori": 204, "glorot_norm": 380, "glorot_uniform": 381, "glu": [323, 391], "gpu": 2, "grad": [161, 310], "graph": [456, 460, 462], "greater": 162, "greater_equ": 163, "grid": 1, "group": 116, "groupnorm": 325, "gru": 324, "guid": 462, "gumbel": 231, "hadamard_transform": 164, "hard_shrink": 392, "hard_tanh": 393, "hardshrink": 326, "hardswish": [328, 394], "hardtanh": 327, "he_norm": 382, "he_uniform": 383, "hinge_loss": 402, "host": 457, "huber_loss": 403, "ident": [165, 384], "ifft": 146, "ifft2": 147, "ifftn": 148, "implement": [2, 5], "index": 459, "infer": 5, "init": [119, 379, 380, 381, 382, 383, 384, 385, 386, 440], "initi": 426, "inner": 166, "inspect": 310, "instal": [7, 8, 457], "instancenorm": 329, "introduc": 2, "inv": 179, "irfft": 149, "irfft2": 150, "irfftn": 151, "is_avail": [120, 205], "isclos": 167, "isinf": 168, "isnan": 169, "isneginf": 170, "isposinf": 171, "issubdtyp": 172, "item": 50, "items": 51, "jax": 461, "join_schedul": 447, "jvp": 173, "kei": 232, "kernel": 1, "kl_div_loss": 404, "l1_loss": 405, "laplac": 233, "layer": [5, 6, 427], "layer_norm": 138, "layernorm": 331, "lazi": 460, "leaf_modul": 343, "leaky_relu": 395, "leakyrelu": 332, "left_shift": 174, "less": 175, "less_equ": 176, "linalg": [177, 178, 179, 180, 181, 182, 183], "linear": [4, 308, 333], "linear_schedul": 448, "linspac": 184, "lion": 438, "llm": 5, "load": [5, 185, 431, 463], "load_weight": 344, "log": [52, 186], "log10": [53, 187], "log1p": [54, 188], "log2": [55, 189], "log_cosh_loss": 406, "log_sigmoid": 396, "log_softmax": 397, "logaddexp": 190, "logical_and": 191, "logical_not": 192, "logical_or": 193, "logsumexp": [56, 194], "loss": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 428], "lstm": 330, "margin_ranking_loss": 407, "matmul": 195, "max": [57, 196], "maximum": 197, "maxpool1d": 334, "maxpool2d": 335, "mean": [58, 198], "memori": 464, "meshgrid": 199, "metal": [1, 3, 8, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 309], "metal_kernel": 139, "min": [59, 211], "minim": 8, "minimum": 212, "mish": [336, 412], "mlxmodel": 5, "modul": [310, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 429], "moveaxi": [60, 213], "mpi": 457, "mse_loss": 408, "multi": 6, "multiheadattent": 357, "multipli": 214, "multivariate_norm": 234, "named_modul": 346, "nan_to_num": 215, "nbyte": 61, "ndim": 62, "neg": 216, "network": 310, "neural": 310, "new_stream": 217, "nll_loss": 409, "nn": [293, 294, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424], "norm": 180, "normal": [235, 385], "not_equ": 218, "numpi": [459, 461], "ones": 219, "ones_lik": 220, "onli": 460, "oper": [0, 2, 430], "optim": [295, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451], "option": 8, "other": 461, "outer": 221, "pad": 222, "paramet": [310, 347], "partit": 223, "perceptron": 6, "place": 459, "power": 224, "prelu": [358, 413], "primit": 2, "prod": [63, 225], "pure": 456, "put": 5, "python": [2, 7, 8], "pytorch": 461, "qr": 181, "quantiz": [226, 293], "quantized_matmul": 227, "quantizedembed": 359, "quantizedlinear": 360, "quick": [310, 462], "radian": 228, "randint": 236, "random": [229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 453], "read": 7, "reciproc": [64, 241], "recv": 121, "recv_lik": 122, "reduc": 457, "refer": 7, "regress": 4, "relu": [363, 414], "relu6": [364, 415], "remaind": 242, "remot": 457, "repeat": 243, "requir": 8, "reset_peak_memori": 206, "reshap": [65, 244], "result": 2, "rfft": 152, "rfft2": 153, "rfftn": 154, "right_shift": 245, "rms_norm": 140, "rmsnorm": 361, "rmsprop": 443, "rnn": 362, "rope": [141, 365], "round": [66, 246], "rsqrt": [67, 247], "sampl": 1, "save": [248, 431, 463], "save_gguf": 249, "save_safetensor": 250, "save_weight": 348, "savez": 251, "savez_compress": 252, "scaled_dot_product_attent": 142, "schedul": 452, "script": [2, 5], "seed": 237, "selu": [366, 416], "send": 123, "sequenti": 367, "serial": 463, "set": 457, "set_cache_limit": 207, "set_default_devic": 253, "set_default_stream": 254, "set_dtyp": 349, "set_memory_limit": 208, "setuptool": 2, "sgd": 444, "shape": [1, 68], "shell": 8, "sigmoid": [255, 417], "sign": 256, "silu": [368, 418], "simpl": [1, 464], "sin": [69, 257], "sinh": 258, "sinusoidalpositionalencod": 369, "size": [8, 70], "smooth_l1_loss": 410, "softmax": [259, 370, 419], "softmin": [371, 420], "softplu": [372, 421], "softshrink": [373, 422], "softsign": 374, "sort": 260, "sourc": 8, "specifi": 465, "speedup": 456, "split": [71, 238, 261], "sqrt": [72, 262], "squar": [73, 263], "squeez": [74, 264], "stack": 265, "start": [310, 457, 462], "start_captur": 209, "state": [350, 441], "std": 266, "step": [375, 423], "step_decai": 449, "stop_captur": 210, "stop_gradi": 267, "stream": [268, 301, 304, 465], "stride": 1, "subtract": 269, "sum": [75, 270], "support": 303, "svd": 182, "swapax": [76, 271], "synchron": 272, "t": 31, "take": 273, "take_along_axi": 274, "tan": 275, "tanh": [276, 376, 424], "tensordot": 277, "tensorflow": 461, "tile": 278, "togeth": 5, "tolist": 77, "topk": 279, "trace": 280, "train": [351, 353, 456, 457], "trainable_paramet": 352, "transform": [2, 377, 454, 456, 458, 460, 462], "transpos": [78, 281], "tree": 455, "tree_flatten": 296, "tree_map": 297, "tree_map_with_path": 298, "tree_reduc": 299, "tree_unflatten": 300, "tri": 282, "tri_inv": 183, "tril": 283, "triplet_loss": 411, "triu": 284, "troubleshoot": 8, "truncated_norm": 239, "tune": 457, "type": 303, "unfreez": 354, "unifi": 464, "uniform": [240, 386], "up": 457, "updat": [310, 355, 442, 459], "update_modul": 356, "upsampl": 378, "us": [1, 2, 460, 465], "usag": [2, 7], "util": [296, 297, 298, 299, 300, 455], "valu": 310, "value_and_grad": [285, 294], "var": [79, 286], "vector": 458, "view": [80, 287], "vjp": [1, 288], "vmap": 289, "weight": 5, "what": 460, "when": 460, "where": 290, "why": 460, "workflow": 3, "x86": 8, "xcode": 3, "you": 460, "zero": 291, "zeros_lik": 292}})